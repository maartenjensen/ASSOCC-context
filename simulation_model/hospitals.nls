globals [#taken-hospital-beds
  #denied-requests-for-hospital-beds
  #max-hospital-beds-taken-at-once
  #admissions-last-tick
]

to release-bed-in-hospital
  set #taken-hospital-beds #taken-hospital-beds - 1
  set is-currently-allocated-a-bed-in-hospital? false
  if #taken-hospital-beds < 0 [error "assertion error"]
end

to  acquire-a-bed-in-hospital
  process-bed-acquired-event
  set  #taken-hospital-beds #taken-hospital-beds + 1
  set #admissions-last-tick #admissions-last-tick + 1
  set is-currently-allocated-a-bed-in-hospital? true
  if #taken-hospital-beds > #beds-in-hospital [error "assertion error"]
  if #taken-hospital-beds > #max-hospital-beds-taken-at-once [set #max-hospital-beds-taken-at-once #taken-hospital-beds]
end

to-report any-free-bed-in-hospital?
  report #taken-hospital-beds < #beds-available-for-admission
end

to-report is-currently-being-treated-at-hospital?
  report  current-motivation = treatment-motive and [is-hospital?] of current-activity and is-currently-allocated-a-bed-in-hospital?
end

to try-acquire-a-bed-in-hospital
  ifelse any-free-bed-in-hospital?
  [
    acquire-a-bed-in-hospital
  ]
  [set #denied-requests-for-hospital-beds #denied-requests-for-hospital-beds + 1]
end

to-report hospital-effectiveness
  ifelse sum [count hired-workers] of hospitals = 0 [report 0]
  [report mean [ifelse-value (count hired-workers > 0) [1 - ratio-sick-personnel] [0]] of hospitals]
end

to-report #beds-available-for-admission
  report floor (#beds-in-hospital * hospital-effectiveness - #taken-hospital-beds)
end

to-report #healthy-hospital-personel
  report sum [#healthy-personel] of hospitals
end

to-report #sick-hospital-personel
  report sum [#sick-personel] of hospitals
end

to process-bed-acquired-event
  increment-hospitalizations-global-metrics
end