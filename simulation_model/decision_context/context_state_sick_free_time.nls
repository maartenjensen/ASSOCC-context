; Filename: context_state_sick_free_time.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: NOT night, either evening, afternoon or morning.
; Age: young, student, worker, retired
; Sickness: The agent is sick (therefore the agent should stay at home)
; Compliance is checked by the needs

; Important needs:
; -----------------------------------
; Belonging: rest at home
; Risk avoidance: rest at home
; Sleep: rest at home
; Compliance: rest at home
; Health: rest at home
; Leisure (conflict): leisure
; Conformity (conflict): network action
; [Exit if young]
; Food safety (conflict): essential shopping
; Luxury (conflict): non-essential shopping

;Code check:
; cssft: NOT csn, cso, csft, cssn, csso, csowh, cssowh

to-report context-state-sick-free-time ; cssft
  
  ; The time is morning or afternoon
  if ce-log-agent and who = ce-log-agent-id [ print "Free time decision making" ]
  
  ; -------------------------------------------
  ; Determine whether there is conflict
  ; -------------------------------------------
  if not cssft-is-need-salient-and-conflicting or ce-disable-conflict-checking
  [
    if ce-log-agent and who = ce-log-agent-id [ print "No conflict: performing default sick free time" ]
    report cssft-default
  ]
  
  if ce-context-depth <= 1  [ report cssft-after-minimal-context-f ] ; ===============  BREAKOUT: After minimal
  
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level cssft-salient-needs
  let salient-needs first salient-needs-and-level
  if ce-log-agent and who = ce-log-agent-id [ print (word "Salient needs:" salient-needs) ]
  
  if length salient-needs = 0
  [ error "in context_state_sick_free_time, salient-needs should be not 0" ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level first (last salient-needs-and-level)
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report cssft-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report cssft-salient-need-deliberation [most-salient-need most-salient-need-level ]
  
  if ce-log-agent and who = ce-log-agent-id [ print (word "Most salient need:" most-salient-need) ]
   
  if most-salient-need = need-sleep or most-salient-need = need-health or most-salient-need = need-risk-avoidance or
     most-salient-need = need-belonging or most-salient-need = need-compliance
  [ report cssft-sleep-health-risk-avoidance-belonging-compliance ]
  
  if most-salient-need = need-leisure
  [ report cssft-leisure ]
  
  if most-salient-need = need-conformity
  [ if ce-context-depth < 4 [ report cssft-exit-before-conformity-f ] ; ===============  BREAKOUT: Conformity
    report cssft-conformity ]
  
  if age = young-age
  [ report cssft-error-f ]
  
  if most-salient-need = need-food-safety
  [ report cssft-food-safety ]
  
  if most-salient-need = need-luxury
  [ report cssft-luxury ]
  
  report cssft-error-f
end

;============== NEED FUNCTIONS =================
to-report cssft-default
  report context-determine-social-distancing (list my-home "rest")
end

to-report cssft-sleep-health-risk-avoidance-belonging-compliance
  report context-determine-social-distancing (list my-home "rest")
end

to-report cssft-leisure
  if leisure-satisfaction-level < ce-need-critical-threshold
  [
    report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ; Always private leisure because the agent is sick so wants to avoid public leisure
  ]
  report cssft-leisure-f
end

to-report cssft-food-safety
  if food-safety-satisfaction-level < ce-need-critical-threshold and food-safety-satisfaction-level < ce-need-critical-threshold and food-safety-satisfaction-level < compliance-satisfaction-level
  [ report context-determine-social-distancing (activity-descriptor one-of my-essential-shops "essential shopping") ]
  report cssft-food-safety-f
end

to-report cssft-luxury
  if luxury-satisfaction-level < ce-need-critical-threshold and luxury-satisfaction-level < ce-need-critical-threshold and luxury-satisfaction-level < compliance-satisfaction-level
  [ report context-determine-social-distancing (activity-descriptor my-non-essential-shop "shopping") ]
  report cssft-luxury-f
end

to-report cssft-conformity
  
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if ce-log-agent and who = ce-log-agent-id [ print (word "Get network action: No action found") ] ]
  [
    ; Retrieve network action
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
    if ce-log-agent and who = ce-log-agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
    
    ; Deliberate on network action
    ifelse network-motive = "rest"
    [ report (list my-home "rest" network-sd) ]
    [
      if cssft-conformity-check-network-motive-available network-motive
      [
        if conformity-satisfaction-level < ce-need-critical-threshold
        [ report (cssft-conformity-perform-network-action network-g-type network-motive network-sd) ]
      ] ; ELSE: cssft-conformity-f
    ]
  ]
  report cssft-conformity-f
end

to-report cssft-conformity-check-network-motive-available [ network-motive ]
  let available-network-motives (list "rest" "relaxing")
  if not (age = young-age)
  [
    set available-network-motives lput "essential shopping" available-network-motives
    set available-network-motives lput "shopping" available-network-motives
  ]
  report member? network-motive available-network-motives
end

to-report cssft-conformity-perform-network-action [ network-g-type network-motive network-sd ]
  if network-g-type = public-leisure-gathering-type and network-motive = "relaxing"
  [ report lput network-sd (activity-descriptor my-public-leisure "relaxing") ]
  if network-g-type = private-leisure-gathering-type and network-motive = "relaxing"
  [ report lput network-sd (activity-descriptor my-private-leisure "relaxing") ]
  
  ; Financial check, or full assocc deliberation when young agent
  if age = young-age or not (conformity-satisfaction-level < financial-stability-satisfaction-level) or not (conformity-satisfaction-level < financial-survival-satisfaction-level)
  [ report cssft-conformity-f ]
  
  if network-g-type = non-essential-shop-gathering-type and network-motive = "shopping"
  [ report lput network-sd (activity-descriptor my-non-essential-shop "shopping") ]
  if network-g-type = essential-shop-gathering-type and network-motive = "essential shopping"
  [ report lput network-sd (activity-descriptor one-of my-essential-shops "essential shopping") ] 
  
  report cssft-conformity-f
end

;============== FULL DELIBERATION FUNCTIONS ==================
to-report cssft-after-minimal-context-f
  report []
end

to-report cssft-exit-before-conformity-f
  report []
end

to-report cssft-leisure-f
  report []
end

to-report cssft-luxury-f
  report []
end

to-report cssft-food-safety-f
  report []
end

to-report cssft-conformity-f
  report []
end

to-report cssft-error-f
  print "Error: sick free time" 
  report []
end

;============== SALIENT NEEDS ==================
to-report cssft-is-need-salient-and-conflicting
  if leisure-satisfaction-level < ce-need-salient-threshold or conformity-satisfaction-level < ce-need-salient-threshold
  [ report true ]
  if age = young-age
  [ report false ]
  if food-safety-satisfaction-level < ce-need-salient-threshold or luxury-satisfaction-level < ce-need-salient-threshold
  [ report true ]
  report false
end

to-report cssft-salient-needs
  let salient-needs []
  let salient-needs-level []
  if sleep-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  if health-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-health salient-needs 
    set salient-needs-level lput health-satisfaction-level salient-needs-level ]
  if compliance-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  ; Exit if not student or worker
  if age = young-age
  [ report list salient-needs salient-needs-level ]
  if food-safety-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-level salient-needs-level ]
  report list salient-needs salient-needs-level
end