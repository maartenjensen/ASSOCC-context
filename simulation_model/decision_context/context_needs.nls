; File: context_needs.nls

; The needs, order them according to alphabet
to-report need-risk-avoidance
  report "risk-avoidance"
end

to-report need-compliance
  report "compliance"
end

to-report need-financial-stability
  report "financial-stability"
end

to-report need-belonging
  report "belonging"
end

to-report need-leisure
  report "leisure"
end

to-report need-luxury
  report "luxury"
end

to-report need-autonomy
  report "autonomy"
end

to-report need-food-safety
  report "food-safety"
end

to-report need-financial-survival
  report "financial-survival"
end

to-report need-health
  report "health"
end

to-report need-sleep
  report "sleep"
end

to-report need-conformity
  report "conformity"
end

to-report get-need-value [the-need]
  if the-need = need-risk-avoidance 
  [ report risk-avoidance-satisfaction-level ]
  if the-need = need-compliance 
  [ report compliance-satisfaction-level ]
  if the-need = need-financial-stability 
  [ report financial-stability-satisfaction-level ]
  if the-need = need-belonging 
  [ report belonging-satisfaction-level ]
  if the-need = need-leisure 
  [ report leisure-satisfaction-level ]
  if the-need = need-luxury 
  [ report luxury-satisfaction-level ]
  if the-need = need-autonomy 
  [ report autonomy-satisfaction-level ]
  if the-need = need-food-safety 
  [ report food-safety-satisfaction-level ]
  if the-need = need-financial-survival 
  [ report financial-survival-satisfaction-level ]
  if the-need = need-health 
  [ report health-satisfaction-level ]
  if the-need = need-sleep 
  [ report sleep-satisfaction-level ]
  if the-need = need-conformity 
  [ report conformity-satisfaction-level ]
  error (word the-need " is not found")
  report ""
end

to-report get-most-need-from-list [need-list]
  let lowest-need-level 10
  let lowest-need ""
  foreach ( need-list ) [
    a-need -> if get-need-value a-need < lowest-need-level
      [ set lowest-need-level get-need-value a-need
        set lowest-need a-need
        ]
  ]
  report lowest-need
end
  
to-report get-most-need-from-table [need-table]
    let lowest-need-level 10
    let lowest-need ""
    foreach ( table:keys need-table ) [
      a-need -> if table:get need-table a-need < lowest-need-level
      [ set lowest-need-level table:get need-table a-need
        set lowest-need a-need
        ]
    ]
    report lowest-need
end

to-report get-most-need
  
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  if financial-stability-satisfaction-level < lowest-need-level [
    set lowest-need-level financial-stability-satisfaction-level
    set lowest-need need-financial-stability 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if luxury-satisfaction-level < lowest-need-level [
    set lowest-need-level luxury-satisfaction-level
    set lowest-need need-luxury 
  ]
  if autonomy-satisfaction-level < lowest-need-level [
    set lowest-need-level autonomy-satisfaction-level
    set lowest-need need-autonomy 
  ] 
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if financial-survival-satisfaction-level < lowest-need-level [
    set lowest-need-level financial-survival-satisfaction-level
    set lowest-need need-financial-survival 
  ] 
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if sleep-satisfaction-level < lowest-need-level [
    set lowest-need-level sleep-satisfaction-level
    set lowest-need need-sleep 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
 
  report lowest-need
end

to-report take-random-need
  let all-needs (list need-risk-avoidance need-compliance need-financial-stability need-belonging need-leisure need-luxury need-autonomy need-food-safety need-financial-survival need-health need-sleep need-conformity)
  report first shuffle all-needs
end