; File: context_need_actions.nls

to set-table-need-actions
  set table-need-actions table:make
  table:put table-need-actions (sort-by < (list need-risk-avoidance)) (list action-be-at-home)
  ;table:put table-need-actions (sort-by < (list need-compliance)) (list )
  ;table:put table-need-actions (sort-by < (list need-financial-stability)) (list )
  table:put table-need-actions (sort-by < (list need-belonging)) (list action-be-at-home action-public-leisure action-private-leisure action-non-essential-shop)
  table:put table-need-actions (sort-by < (list need-leisure)) (list action-public-leisure action-private-leisure) ; action-be-at-home is removed since leisure is satisfied more by public and private leisure
  table:put table-need-actions (sort-by < (list need-luxury)) (list action-non-essential-shop)
  ;table:put table-need-actions (sort-by < (list need-autonomy)) (list )
  table:put table-need-actions (sort-by < (list need-food-safety)) (list action-essential-shop)
  ;table:put table-need-actions (sort-by < (list need-financial-survival)) (list )
  ;table:put table-need-actions (sort-by < (list need-health)) (list )
  table:put table-need-actions (sort-by < (list need-sleep)) (list action-be-at-home)
  table:put table-need-actions (sort-by < (list need-conformity)) (list action-imitate-network) 
end

to set-table-need-actions-working-hours
  set table-need-actions-working-hours table:make
  if age = young-age   [ 
    table:put table-need-actions-working-hours (sort-by < (list need-compliance)) (list action-school)
    table:put table-need-actions-working-hours (sort-by < (list need-belonging)) (list action-school)
    table:put table-need-actions-working-hours (sort-by < (list need-autonomy)) (list action-school)
  ]
  if age = student-age [
    table:put table-need-actions-working-hours (sort-by < (list need-compliance)) (list action-university)
    table:put table-need-actions-working-hours (sort-by < (list need-belonging)) (list action-university)
    table:put table-need-actions-working-hours (sort-by < (list need-autonomy)) (list action-university)
  ]
  if age = worker-age  [
    table:put table-need-actions-working-hours (sort-by < (list need-risk-avoidance)) (list action-work-at-home)
    table:put table-need-actions-working-hours (sort-by < (list need-compliance)) (list action-workplace)
    table:put table-need-actions-working-hours (sort-by < (list need-financial-stability)) (list action-workplace action-work-at-home)
    table:put table-need-actions-working-hours (sort-by < (list need-belonging)) (list action-work-at-home)
    table:put table-need-actions-working-hours (sort-by < (list need-autonomy)) (list action-workplace)
    table:put table-need-actions-working-hours (sort-by < (list need-financial-survival)) (list action-workplace action-work-at-home)
  ]
end

; This variable is for both positivily influenced as well as negatively influenced needs
; The needs that are not considered (Yet) are:
; Sleep need: since this is already satisfied by staying home in the night
; Risk-avoidance: this should be included when social distancing is implemented
to set-table-action-with-related-needs
  set table-action-with-related-needs table:make
  table:put table-action-with-related-needs (list action-be-at-home) (list need-belonging need-leisure)
  table:put table-action-with-related-needs (list action-workplace) (list need-belonging need-compliance need-financial-stability need-autonomy need-financial-survival )
  table:put table-action-with-related-needs (list action-work-at-home) (list need-belonging need-compliance need-financial-stability need-autonomy need-financial-survival ) ; this one should be updated
  table:put table-action-with-related-needs (list action-school) (list need-belonging need-compliance need-autonomy )
  table:put table-action-with-related-needs (list action-university) (list need-belonging need-compliance need-autonomy )
  table:put table-action-with-related-needs (list action-essential-shop) (list need-financial-stability need-financial-survival need-food-safety)
  table:put table-action-with-related-needs (list action-non-essential-shop) (list need-financial-stability need-financial-survival need-luxury need-belonging)
  table:put table-action-with-related-needs (list action-private-leisure) (list need-belonging need-leisure)
  table:put table-action-with-related-needs (list action-public-leisure) (list need-belonging need-leisure)
  table:put table-action-with-related-needs (list action-imitate-network) (list need-belonging)
end

; So i need to generate these tables?? That's so tedious and so much work, but yeah whatever. And they are also context dependent right, so in some contexts actually the needs have to be different as well.
; make all possible combinations? Well staying home is always possible, so we just make all other combinations, is this factorial? How do I program this? I don't know exactly.... Let's think about this.
to set-table-actions-with-related-needs
  set-table-action-with-related-needs
  
  set table-actions-with-related-needs table:make
  table:put table-actions-with-related-needs (list action-be-at-home action-essential-shop) (list need-belonging need-leisure need-food-safety need-financial-stability need-financial-survival)
  table:put table-actions-with-related-needs (list action-be-at-home action-essential-shop action-private-leisure) (list need-belonging need-leisure need-food-safety need-financial-stability need-financial-survival )
  table:put table-actions-with-related-needs (list action-be-at-home action-essential-shop action-private-leisure action-non-essential-shop) (list need-belonging need-leisure need-food-safety need-financial-stability need-financial-survival need-luxury )
  table:put table-actions-with-related-needs (list action-be-at-home action-essential-shop action-private-leisure action-non-essential-shop action-public-leisure) (list need-belonging need-leisure need-food-safety need-financial-stability need-financial-survival need-luxury )
  
  table:put table-actions-with-related-needs (list action-be-at-home action-private-leisure) (list need-belonging need-leisure)
  table:put table-actions-with-related-needs (list action-be-at-home action-private-leisure action-public-leisure) (list need-belonging need-leisure)
  
  ; For this it would be nice to have an algorithm filling these lists
  ; Add new combinations, otherwise the set-table-action-with-related-needs has to be used
  
  ; Single actions don't have to be included, because they are not relevant
  ;table:put table-actions-with-related-needs (list action-be-at-home)
end

to-report get-related-needs-from-action-list [the-action-list]
  let related-needs (list)
  foreach the-action-list [ the-action ->
    ifelse table:has-key? table-action-with-related-needs (list the-action)
    [ set related-needs (sentence related-needs table:get table-action-with-related-needs (list the-action)) ]
    [ error (word the-action " does not have a key in table-action-with-related-needs") ]
  ]
  report remove-duplicates related-needs
end

; this should be a recursive function, right??
