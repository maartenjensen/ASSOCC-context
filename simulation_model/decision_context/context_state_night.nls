; Filename: context_state_night.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Night! Regardless of working day or non working day
; Age: All
; Sickness: The agent is not sick
; Actions available: rest at home, leisure at private/public leisure

;Important needs (6 needs): 
;Sleep -> Home (most probable)
;Risk avoidance -> Home
;Belonging -> Home (home, private leisure and public leisure give belonging however the agent should by default be at home to sleep)
;Autonomy -> Home
;Conformity -> Depends on the network
;Leisure -> Full ASSOCC (since the agent can gain more leisure at a leisure place)

;Normative needs:
;Compliance -> Only for normative considerations

;Adjusted needs:
;None

;Code check:
; csn: NOT cso, csft, cssn, csso, cssft

to-report context-state-night
  ; The time is morning, afternoon or evening
  if #log-agent and who = #agent-id [ print "Custom night deliberation" ]
  ; salient needs, need-level < #need-salient-threshold
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level csn-salient-needs
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient default
  ; -------------------------------------------
  if length salient-needs = 0
  [ report csn-default ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  if length salient-needs > 1
  [
    set most-salient-need (context-determine-most-salient-need salient-needs (last salient-needs-and-level))
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report csn-salient-need-deliberation most-salient-need
end

to-report csn-salient-need-deliberation [most-salient-need]
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  ; The following needs support the default action: resting at home
  if most-salient-need = need-sleep or most-salient-need = need-belonging or most-salient-need = need-autonomy or most-salient-need = need-risk-avoidance
  [ report csn-sleep-belonging-autonomy-risk-avoidance ]
  
  ; The following needs support a non-default action and therefore the #need-critical-threshold needs to be checked. 
  ; Conformity is a little bit of an exception where if the network stays home the agent can just following conformity
  if most-salient-need = need-leisure and leisure-satisfaction-level < #need-critical-threshold [
    report csn-leisure
  ]
  
  if most-salient-need = need-conformity [
    report csn-conformity
  ]
  report csn-error-f
end

;============== NEED FUNCTIONS =================
to-report csn-default
  report context-determine-social-distancing (list my-home "rest")
end

to-report csn-sleep-belonging-autonomy-risk-avoidance
  report context-determine-social-distancing (list my-home "rest")
end

to-report csn-leisure
  ifelse context-normative-should-I-stay-home-with-need leisure-satisfaction-level ; complying to rules vs leisure
  [ report context-determine-social-distancing (list my-home "rest")] 
  [ 
    ifelse risk-avoidance-satisfaction-level < #risk-avoidance-private-leisure-preference ; Create preference for private leisure, when risk avoidance is more salient
    [ report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ]
    [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  report csn-leisure-f
end

to-report csn-conformity
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if #log-agent and who = #agent-id [ print (word "Get network action: No action found") ] ]
  [
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
    if #log-agent and who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
    if network-g-type = home-gathering-type and network-motive = "rest"
    [ report (list my-home "rest" network-sd) ]
    
    if conformity-satisfaction-level < #need-critical-threshold
    [
      if network-g-type = public-leisure-gathering-type and network-motive = "relaxing"
      [
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-public-leisure "relaxing") ]
      ]
      if network-g-type = private-leisure-gathering-type and network-motive = "relaxing"
      [ 
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-private-leisure "relaxing") ]
      ]
    ]
    ; The action taking treatment is not affected by conformity, i.e. if the agent's network is all in treatment this should not make this agent go into treatment
    ; Working (at workplace or from home), school, university is not a possible action during the night.
  ]
  report csn-conformity-f
end

;============== FULL DELIBERATION FUNCTIONS ==================
to-report csn-leisure-f
  report []
end

to-report csn-conformity-f
  report []
end

to-report csn-error-f
  report []
end

;============== SALIENT NEEDS =================
to-report csn-salient-needs
  let salient-needs []
  let salient-needs-level []
  if sleep-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  report list salient-needs salient-needs-level
end