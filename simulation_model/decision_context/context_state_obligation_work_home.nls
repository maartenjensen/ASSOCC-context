; Filename: context_state_obligation_work_home.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Morning or afternoon during working time
; Age: Worker
; Sickness: The agent is not sick
; Compliance is included in the salient need check
; Work from home is an option

; Global variables
; #need-critical-threshold

; Variables for the agent
; obligation-activity

; Important needs (11 worker):
; -----------------------------------
; Compliance: norm following
; Financial stability
; Financial survival
; Belonging (conflict): norm following
; Autonomy (conflict)
; Risk avoidance (conflict)
; Sleep (conflict)
; Leisure (conflict)
; Conformity (conflict)
; Food safety (conflict)
; Luxury (conflict)

;Code check:
; csowh: NOT  csn, csowh, csft, cssn, csso, cssowh, cssft

;#need-critical-threshold for critical need

to-report context-state-obligation-work-home ; csowh
  
  ; The time is morning or afternoon
  if #log-agent and who = #agent-id [ print "Obligation Work Home - Decision Making" ]

  if ce-context-depth < 1 [ report csowh-after-minimal-context-f ]  ; ===============  BREAKOUT: if not 2 or higher
  
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level csowh-salient-needs
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient default
  ; -------------------------------------------
  if length salient-needs = 0
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-default ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level first (last salient-needs-and-level)
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report csowh-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report csowh-salient-need-deliberation [ most-salient-need most-salient-need-level ]
  
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Compliance is first checked, since the agents get a compliance boost at working hours OR at the beginning of the working day
  if most-salient-need = need-compliance or most-salient-need = need-financial-stability or most-salient-need = need-financial-survival
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-compliance-financial most-salient-need-level ]
  
  if most-salient-need = need-belonging ; TODO: 
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-belonging ]
  
  if most-salient-need = need-autonomy ; TODO: 
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-autonomy ]
  
  if most-salient-need = need-risk-avoidance or most-salient-need = need-sleep 
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-risk-avoidance-sleep most-salient-need-level ] ; TODO: split these functions
  
  if most-salient-need = need-leisure ; ce-context-depth is already at 2
  [ report csowh-leisure ]
  
  if most-salient-need = need-conformity 
  [ if ce-context-depth < 4 [ report csowh-exit-before-conformity-f ]  ; ===============  BREAKOUT: Conformity
    report csowh-conformity ] ; TODO
  
  if most-salient-need = need-luxury
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-luxury ]
  
  if most-salient-need = need-food-safety
  [ if ce-context-depth < 3 [ report csowh-exit-before-normative-f ]  ; ===============  BREAKOUT: Normative
    report csowh-food-safety ]
  
  report csowh-error-f
end

;============== NEED FUNCTIONS =================
to-report csowh-default
  ifelse is-working-from-home-recommended? or context-normative-should-I-stay-home
  [ report context-determine-social-distancing (list my-home work-motive) ]
  [ report context-determine-social-distancing obligation-activity-descriptor ]
end

to-report csowh-compliance-financial [ most-salient-need-level ]
  ifelse is-working-from-home-recommended? or context-normative-should-I-stay-home
  [ report context-determine-social-distancing (list my-home work-motive) ]
  [ report context-determine-social-distancing obligation-activity-descriptor ]
end

to-report csowh-belonging
;  ifelse context-normative-should-I-stay-home
;  [ report context-determine-social-distancing (list my-home "rest") ]
;  [ report context-determine-social-distancing obligation-activity-descriptor ]
  report csowh-belonging-f
end

to-report csowh-autonomy
;  ifelse not context-normative-should-I-stay-home
;  [ report context-determine-social-distancing obligation-activity-descriptor ]
;  [ if most-salient-need-level < #need-critical-threshold
;    [ report context-determine-social-distancing obligation-activity-descriptor ]
;  ]
  report csowh-autonomy-f
end

to-report csowh-risk-avoidance-sleep [ most-salient-need-level ] ; TODO split this function
;  ifelse context-normative-should-I-stay-home
;  [ report context-determine-social-distancing (list my-home "rest") ]
;  [ if most-salient-need-level < #need-critical-threshold
;    [ report context-determine-social-distancing (list my-home "rest") ]
;  ]
  report csowh-risk-avoidance-sleep-f
end

to-report csowh-leisure
  if leisure-satisfaction-level < #need-critical-threshold
  [
    ifelse risk-avoidance-satisfaction-level < #risk-avoidance-private-leisure-preference ; Create preference for private leisure, when risk avoidance is more salient
    [ report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ]
    [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  report csowh-leisure-f 
end

to-report csowh-luxury
  if luxury-satisfaction-level < #need-critical-threshold
  [
    if age = worker-age or (luxury-satisfaction-level < financial-stability-satisfaction-level and luxury-satisfaction-level < financial-survival-satisfaction-level)
    [ report context-determine-social-distancing (activity-descriptor my-non-essential-shop "shopping") ]
  ]
  if #enable-salient-food-luxury-forced-obligation
  [ if not context-normative-should-I-stay-home
    [ report context-determine-social-distancing obligation-activity-descriptor ]
  ]
  report csowh-luxury-f
end

to-report csowh-food-safety
  if food-safety-satisfaction-level < #need-critical-threshold
  [
    if age = worker-age or (food-safety-satisfaction-level < financial-stability-satisfaction-level and food-safety-satisfaction-level < financial-survival-satisfaction-level)
    [ report context-determine-social-distancing (activity-descriptor one-of my-essential-shops "essential shopping") ]
  ]
  if #enable-salient-food-luxury-forced-obligation
  [ if not context-normative-should-I-stay-home
    [ report context-determine-social-distancing obligation-activity-descriptor ]
  ]
  report csowh-food-safety-f
end

to-report csowh-conformity ; TODO
  
;  let network-action context-conformity-get-network-action
;  ifelse empty? network-action
;  [ if #log-agent and who = #agent-id [ print (word "Get network action: No action found") ] ]
;  [
;    ; Retrieve network action
;    let network-g-type (location-of network-action)
;    let network-motive motive-of network-action
;    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
;    if #log-agent and who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
;    
;    ; Deliberate on network action
;    ifelse conformity-satisfaction-level < #need-critical-threshold
;    [
;       report csowh-conformity-choose-possible-network-action network-g-type network-motive network-sd
;    ]
;    [
;      ifelse not context-normative-should-I-stay-home
;      [ if network-motive = motive-of obligation-activity-descriptor
;        [ report (lput network-sd obligation-activity-descriptor) ]
;      ]
;      [ if network-motive = "rest" [ report (list my-home "rest" network-sd) ] ]
;    ]
;  ]
  
  report csowh-conformity-f
end

to-report csowh-conformity-choose-possible-network-action [network-g-type network-motive network-sd]
  if network-motive = "rest"
  [ report (list my-home "rest" network-sd) ]
  if network-motive = motive-of obligation-activity-descriptor
  [ report (lput network-sd obligation-activity-descriptor) ]
  if network-motive = "private-leisure"
  [ report (lput network-sd activity-descriptor my-private-leisure "relaxing") ]
  if network-motive = "public-leisure"
  [ report (lput network-sd activity-descriptor my-public-leisure "relaxing") ]
  if age = worker-age or (age = student-age and conformity-satisfaction-level < financial-stability-satisfaction-level and conformity-satisfaction-level < financial-survival-satisfaction-level)
  [
    if network-motive = "essential-shop"
    [ report (lput network-sd activity-descriptor one-of my-essential-shops "essential shopping") ]
    if network-motive = "non-essential-shop"
    [ report (lput network-sd activity-descriptor my-non-essential-shop "shopping") ]
  ]
  report csowh-conformity-f
end

;============== FULL DELIBERATION FUNCTIONS ==================
to-report csowh-after-minimal-context-f
  report []
end

to-report csowh-exit-before-normative-f
  report []
end

to-report csowh-exit-before-conformity-f
  report []
end

to-report csowh-autonomy-f
  report []
end

to-report csowh-belonging-f
  report []
end

to-report csowh-leisure-f
  report []
end

to-report csowh-luxury-f
  report []
end

to-report csowh-food-safety-f
  report []
end

to-report csowh-conformity-f
  report []
end

to-report csowh-risk-avoidance-sleep-f
  report []
end

to-report csowh-error-f
  report []
end

;============== SALIENT NEEDS ==================
to-report csowh-salient-needs
  let salient-needs []
  let salient-needs-level []
  if compliance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  if sleep-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  if food-safety-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-level salient-needs-level ]
  if financial-survival-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-survival salient-needs 
    set salient-needs-level lput financial-survival-satisfaction-level salient-needs-level ]
  if financial-stability-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-stability salient-needs 
    set salient-needs-level lput financial-stability-satisfaction-level salient-needs-level ]
  ; Exit
  report list salient-needs salient-needs-level
end