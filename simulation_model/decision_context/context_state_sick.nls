; Filename: context_state_sick.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: All times potentially
; Age: young, student, worker or elderly
; Sickness: The agent is sick

;--------------------------------------------------------------------------------------------------
;--------------                              NIGHT                               ------------------
to-report context-state-sick-treatment
  ; The time can be anything
  if #log-agent and who = #agent-id [ print "Custom deliberation: So sick need treatment?" ]
  
  ; This function is all about determining whether the agent needs treatment. Critical symptoms or very low health need (this would overwrite all other needs)
  ; the health need is not included since its 0 for severely infected anyway Health is depricated since probably everyone gets a very low health satisfaction when sick EDIT: too many people requesting for hospital so added health level as constraint
  ; The risk-avoidance need is only initially affecting it a bit, so I is not included and risk-avoidance-satisfaction-level < #risk-avoid-treatment-threshold 
  if is-observing-critical-symptoms? 
  [ ifelse is-observing-very-critical-symptoms?
    [ if #log-agent and who = #agent-id [ print (word "Treatment needed, very critical:" ([infection-status] of turtle #agent-id)) ]
      report lput True (activity-descriptor my-hospital treatment-motive) ]
    [ if #log-agent and who = #agent-id [ print (word "Treatment perhaps not needed:" ([infection-status] of turtle #agent-id)) ]
      report [] ]
  ]
  if #log-agent and who = #agent-id [ print "No treatment needed, however sick" ]
  report []
end

to-report is-observing-very-critical-symptoms?
  if infection-status = "infected-terminal" 
  or infection-status = "severe-to-hospital-infection-status"
  or infection-status = "hospital-to-death-infection-status"
  or infection-status = "hospital-to-rec-infection-status"
  [ report true]
  
  report false
end



;--------------------------------------------------------------------------------------------------
;--------------                          FREE TIME                               ------------------

to-report context-state-sick-free-time

  ; most important need??
  let most-salient-need context-sick-most-salient-need-free-time
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  if most-salient-need = need-sleep 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-health 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-risk-avoidance 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-belonging 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-autonomy 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-compliance 
  [ report (list my-home "rest" True)]
  ; Need leisure, food-safety, conformity, luxury require further implementation or Full ASSOCC deliberation
  ; The conformity need can probably be implemented easily when the network stays home, the leisure need is probably best determined by full ASSOCC
  ; Because this is actually dependent on the combination of needs, if leisure is lowest but sleep AND risk avoidance AND autonomy is also important 
  ; then the agent should probably still stay at home and sleep (rest).
  ; Luxury, requires the agent to go outside
  ; Food safety, also requires the agent to go outside
  report []
end

to-report context-state-sick-free-time-young

  ; most important need??
  let most-salient-need context-sick-most-salient-need-free-time-young
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  if most-salient-need = need-sleep 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-health 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-risk-avoidance 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-belonging 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-compliance 
  [ report (list my-home "rest" True)]
  ; Need leisure and conformity require further implementation or Full ASSOCC deliberation
  ; The conformity need can probably be implemented easily when the network stays home, the leisure need is probably best determined by full ASSOCC
  ; Because this is actually dependent on the combination of needs, if leisure is lowest but sleep AND risk avoidance AND autonomy is also important 
  ; then the agent should probably still stay at home and sleep (rest).
  
  report []
end

to-report context-sick-most-salient-need-free-time
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if get-leisure-satisfaction-free-time < lowest-need-level [
    set lowest-need-level get-leisure-satisfaction-free-time
    set lowest-need need-leisure 
  ]
  if (luxury-satisfaction-level + #luxury-add) < lowest-need-level [
    set lowest-need-level (luxury-satisfaction-level + #luxury-add)
    set lowest-need need-luxury 
  ]
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if get-sleep-satisfaction-day < lowest-need-level [
    set lowest-need-level get-sleep-satisfaction-day
    set lowest-need need-sleep 
  ]
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  report lowest-need
end

; This function compares without the luxury and food safety need, since young don't do shopping
to-report context-sick-most-salient-need-free-time-young
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if get-leisure-satisfaction-free-time < lowest-need-level [
    set lowest-need-level get-leisure-satisfaction-free-time
    set lowest-need need-leisure 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if get-sleep-satisfaction-day < lowest-need-level [
    set lowest-need-level get-sleep-satisfaction-day
    set lowest-need need-sleep 
  ]
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  report lowest-need
end

;--------------------------------------------------------------------------------------------------
;--------------                         OBLIGATION                               ------------------

to-report context-state-sick-obligation-worker

  ; most important need??
  let most-salient-need context-sick-most-salient-need-obligation-worker
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  if most-salient-need = need-sleep 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-health 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-risk-avoidance 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-belonging 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-compliance 
  [ report (list my-home "rest" True)]
  ; Need leisure, autonomy, conformity, luxury and food safety require further implementation or Full ASSOCC deliberation
  ; The conformity need can probably be implemented easily when the network stays home, the leisure need is probably best determined by full ASSOCC
  ; Because this is actually dependent on the combination of needs, if leisure is lowest but sleep AND risk avoidance AND autonomy is also important 
  ; then the agent should probably still stay at home and sleep (rest).
  ; Luxury, requires further deliberation
  ; Food safety, also requires further deliberation
  ; Also financial survival and financial stability
  report []
end

to-report context-sick-most-salient-need-obligation-worker
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if (luxury-satisfaction-level + #luxury-add) < lowest-need-level [
    set lowest-need-level (luxury-satisfaction-level + #luxury-add)
    set lowest-need need-luxury 
  ]
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if get-sleep-satisfaction-day < lowest-need-level [
    set lowest-need-level get-sleep-satisfaction-day
    set lowest-need need-sleep 
  ]
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  if autonomy-satisfaction-level < lowest-need-level [
    set lowest-need-level autonomy-satisfaction-level
    set lowest-need need-autonomy 
  ]
  if financial-survival-satisfaction-level < lowest-need-level [
    set lowest-need-level financial-survival-satisfaction-level
    set lowest-need need-financial-survival 
  ]
  if financial-stability-satisfaction-level < lowest-need-level [
    set lowest-need-level financial-stability-satisfaction-level
    set lowest-need need-financial-stability 
  ]
  report lowest-need
end

to-report context-state-sick-obligation-student

  ; most important need??
  let most-salient-need context-sick-most-salient-need-obligation-student
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  if most-salient-need = need-sleep 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-health 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-risk-avoidance 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-belonging 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-compliance 
  [ report (list my-home "rest" True)]
  ; Need leisure, autonomy, conformity, luxury and food safety require further implementation or Full ASSOCC deliberation
  ; The conformity need can probably be implemented easily when the network stays home, the leisure need is probably best determined by full ASSOCC
  ; Because this is actually dependent on the combination of needs, if leisure is lowest but sleep AND risk avoidance AND autonomy is also important 
  ; then the agent should probably still stay at home and sleep (rest).
  ; Luxury, requires further deliberation
  ; Food safety, also requires further deliberation
  report []
end

to-report context-sick-most-salient-need-obligation-student
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if (luxury-satisfaction-level + #luxury-add) < lowest-need-level [
    set lowest-need-level (luxury-satisfaction-level + #luxury-add)
    set lowest-need need-luxury 
  ]
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if get-sleep-satisfaction-day < lowest-need-level [
    set lowest-need-level get-sleep-satisfaction-day
    set lowest-need need-sleep 
  ]
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  if autonomy-satisfaction-level < lowest-need-level [
    set lowest-need-level autonomy-satisfaction-level
    set lowest-need need-autonomy 
  ]
  report lowest-need
end


to-report context-state-sick-obligation-young

  ; most important need??
  let most-salient-need context-sick-most-salient-need-obligation-young
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  if most-salient-need = need-sleep 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-health 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-risk-avoidance 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-belonging 
  [ report (list my-home "rest" True)]
  if most-salient-need = need-compliance 
  [ report (list my-home "rest" True)]
  ; Need leisure, autonomy (maybe go to school) and conformity require further implementation or Full ASSOCC deliberation
  ; The conformity need can probably be implemented easily when the network stays home, the leisure need is probably best determined by full ASSOCC
  ; Because this is actually dependent on the combination of needs, if leisure is lowest but sleep AND risk avoidance AND autonomy is also important 
  ; then the agent should probably still stay at home and sleep (rest).
  
  report []
end


; This function compares without the luxury and food safety need, since young don't do shopping
to-report context-sick-most-salient-need-obligation-young
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if health-satisfaction-level < lowest-need-level [
    set lowest-need-level health-satisfaction-level
    set lowest-need need-health 
  ]
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if get-sleep-satisfaction-day < lowest-need-level [
    set lowest-need-level get-sleep-satisfaction-day
    set lowest-need need-sleep 
  ]
  if compliance-satisfaction-level < lowest-need-level [
    set lowest-need-level compliance-satisfaction-level
    set lowest-need need-compliance 
  ]
  if autonomy-satisfaction-level < lowest-need-level [
    set lowest-need-level autonomy-satisfaction-level
    set lowest-need need-autonomy 
  ]
  report lowest-need
end