; Filename: context_state_free_time.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: NOT night, and for everyone except for retired its NOT a working day during morning or afternoon
; Age: Either young OR student, worker, retired
; Sickness: The agent is not sick

to-report context-state-free-time
  ; The time is morning, afternoon or evening
  ;if who = #agent-id [ print "Custom leisure time deliberation" ]
  ; most important need??
  let most-salient-need context-most-salient-need-free-time
  ;if who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  if most-salient-need = need-belonging [
    ifelse context-normative-should-I-stay-home-with-need belonging-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing (context-heuristic-random-action (list (list my-home "rest")
      (activity-descriptor my-non-essential-shop "shopping") (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  if most-salient-need = need-leisure [ ; In this function we chose private and public leisure, and not home because the agent get's more leisure satisfaction from private and public leisure. This can be broken down as well
    ifelse context-normative-should-I-stay-home-with-need leisure-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ] ; TODO break the following thing up, if in quarantine the agent will just stay home because leisure can also be retrieved from staying home, otherwise the agent will go out for max leisure
    [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  if most-salient-need = need-luxury [
    ifelse context-normative-should-I-stay-home-with-need luxury-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ] 
    [ if context-financial-need-check luxury-satisfaction-level
      [ report context-determine-social-distancing (activity-descriptor my-non-essential-shop "shopping") ] 
    ]
  ]
  if most-salient-need = need-food-safety [
    ifelse context-normative-should-I-stay-home-with-need food-safety-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ] 
    [ if context-financial-need-check food-safety-satisfaction-level
      [ report context-determine-social-distancing (activity-descriptor one-of my-essential-shops "essential shopping") ]
    ]
  ]
  if most-salient-need = need-risk-avoidance [ ; If the need for risk avoidance is most salient the agent will always perform social distancing?
     report (list my-home "rest" true)
  ]
  if most-salient-need = need-sleep [
     report context-determine-social-distancing (list my-home "rest")
  ]
  if most-salient-need = need-conformity [
    let network-action context-conformity-get-network-action
    ifelse empty? network-action
    [ ;if who = #agent-id [ print (word "Get network action: No action found") ] 
      report [] 
    ]
    [
      let network-g-type (location-of network-action)
      let network-motive motive-of network-action
      let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
      ;if who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
      if network-g-type = home-gathering-type and network-motive = "rest"
      [ report (list my-home "rest" network-sd) ]
      if network-g-type = public-leisure-gathering-type and network-motive = "relaxing"
      [
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-public-leisure "relaxing") ]
      ]
      if network-g-type = private-leisure-gathering-type and network-motive = "relaxing"
      [ 
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-private-leisure "relaxing") ]
      ]
      if network-g-type = non-essential-shop-gathering-type and network-motive = "shopping"
      [ 
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ if context-financial-need-check luxury-satisfaction-level
          [ report lput network-sd (activity-descriptor my-non-essential-shop "shopping") ]
        ]
      ]
      if network-g-type = essential-shop-gathering-type and network-motive = "essential shopping"
      [
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ if context-financial-need-check food-safety-satisfaction-level
          [ report lput network-sd (activity-descriptor one-of my-essential-shops "essential shopping") ]
        ]
      ] 
      ; Treatment is not implemented since this agent is not sick
      ; Working (at workplace or from home), school, university is not implemented since we are considering leisure time
    ]
  ]
  ; I'm not going to consider the normative aspects, where an agent is not in quarantine, but because
  ; the whole network is in quarantine maybe it should also consider being in quarantine, here I can
  ; just link to work of Rene or something, because this is actual argumentation, team reasoning and such.
  ;  ifelse context-normative-should-I-stay-home-with-need leisure-satisfaction-level
  ;  [ report context-determine-social-distancing (list my-home "rest") ] 
  ;  [ report context-determine-social-distancing (list (activity-descriptor my-non-essential-shop "shopping")) ]
  ;]
  ; report context-determine-social-distancing (list my-home "rest")
  report []
end

to-report context-state-free-time-young
  ; The time is morning, afternoon or evening
  ;if who = #agent-id [ print "Custom leisure time deliberation" ]
  ; most important need??
  let most-salient-need context-most-salient-need-free-time-young
  ;if who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  if most-salient-need = need-belonging [
    ifelse context-normative-should-I-stay-home-with-need belonging-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing (context-heuristic-random-action (list (list my-home "rest")
      (activity-descriptor my-non-essential-shop "shopping") (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  if most-salient-need = need-leisure [ ; In this function we chose private and public leisure, and not home because the agent get's more leisure satisfaction from private and public leisure. This can be broken down as well
    ifelse context-normative-should-I-stay-home-with-need leisure-satisfaction-level
    [ report context-determine-social-distancing (list my-home "rest") ] ; TODO break the following thing up, if in quarantine the agent will just stay home because leisure can also be retrieved from staying home, otherwise the agent will go out for max leisure
    [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  if most-salient-need = need-risk-avoidance [
     report (list my-home "rest" True)
  ]
  if most-salient-need = need-sleep [
     report context-determine-social-distancing (list my-home "rest")
  ]
  if most-salient-need = need-conformity [
    let network-action context-conformity-get-network-action
    ifelse empty? network-action
    [ ;if who = #agent-id [ print (word "Get network action: No action found") ] 
    ]
    [
      let network-g-type (location-of network-action)
      let network-motive motive-of network-action
      let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
      ;if who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
      if network-g-type = home-gathering-type and network-motive = "rest"
      [ report (list my-home "rest" network-sd) ]
      if network-g-type = public-leisure-gathering-type and network-motive = "relaxing"
      [
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-public-leisure "relaxing") ]
      ]
      if network-g-type = private-leisure-gathering-type and network-motive = "relaxing"
      [ 
        ifelse context-normative-should-I-stay-home-with-need conformity-satisfaction-level ; complying to rules vs conformity
        [ report (list my-home "rest" network-sd) ] 
        [ report lput network-sd (activity-descriptor my-private-leisure "relaxing") ]
      ]
      ; Treatment is not implemented since this agent is not sick
      ; Working (at workplace or from home), school, university is not implemented since we are considering leisure time
    ]
  ]
  report []
end

; All the relevant needs are considered
to-report context-most-salient-need-free-time
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if luxury-satisfaction-level < lowest-need-level [
    set lowest-need-level luxury-satisfaction-level
    set lowest-need need-luxury 
  ]
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if sleep-satisfaction-level < lowest-need-level [
    set lowest-need-level sleep-satisfaction-level
    set lowest-need need-sleep 
  ]
  report lowest-need
end

; This function compares without the luxury and food safety need, since young don't do shopping
to-report context-most-salient-need-free-time-young
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  if sleep-satisfaction-level < lowest-need-level [
    set lowest-need-level sleep-satisfaction-level
    set lowest-need need-sleep 
  ]
  report lowest-need
end

to-report context-conformity-get-network-action
  if not any? my-network [ report [] ]
  let relevant-memory ifelse-value is-working-day-for-me? [what-my-network-did-week-day] [what-my-network-did-weekend]
  if length relevant-memory >= 4 [
    report (first relevant-memory)
  ]
  report []
end

to-report context-financial-need-check [p-most-salient-need-level]
  ifelse p-most-salient-need-level < financial-survival-satisfaction-level and p-most-salient-need-level < financial-stability-satisfaction-level
  [ report True ]
  [ report False ]
end