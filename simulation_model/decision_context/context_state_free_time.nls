; Filename: context_state_free_time.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: NOT night, and for everyone except for young/student/worker its NOT a working day during morning or afternoon
; Age: young, student, worker, or retired
; Sickness: The agent is not sick

; Important needs:
; -----------------------------------
; Belonging: rest or leisure
; Risk avoidance: rest at home
; Sleep: rest at home
; Leisure: leisure
; Conformity: network action
; [Exit if young]
; Food safety: essential shopping
; Luxury: non-essential shopping

; Normative Needs
; - Compliance

;Code check:
; csft: NOT csn, cso, cssn, csso, cssft
; leisure-satisfaction-level should only occur in the function csft-balance-needs, other than that it should be leisure-satisfaction-balanced
; Same goes for luxury-satisfaction-level and sleep-satisfaction-level

to-report context-state-free-time ; csft
  
  ; The time is morning or afternoon
  if #log-agent and who = #agent-id [ print "Free time decision making" ]
  
  ; Balance needs
  csft-balance-needs
  
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level csft-salient-needs
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient default
  ; -------------------------------------------
  if length salient-needs = 0
  [ report csft-default ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level first (last salient-needs-and-level)
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report csft-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report csft-salient-need-deliberation [most-salient-need most-salient-need-level ]
  
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  if most-salient-need = need-sleep or most-salient-need = need-risk-avoidance
  [ report csft-sleep-risk-avoidance ]
  
  if most-salient-need = need-belonging
  [ report csft-belonging ]
  
  if most-salient-need = need-leisure
  [ report csft-leisure ]
  
  if most-salient-need = need-conformity
  [ report csft-conformity ]
  
  if age = young-age
  [ report csft-error-f ]
  
  if most-salient-need = need-food-safety
  [ report csft-food-safety ]
  
  if most-salient-need = need-luxury
  [ report csft-luxury ]
  
  report csft-error-f
end

;============== NEED FUNCTIONS =================
to-report csft-default
  report context-determine-social-distancing (list my-home "rest")
end

to-report csft-sleep-risk-avoidance
  report context-determine-social-distancing (list my-home "rest")
end

to-report csft-belonging
  ifelse context-normative-should-I-stay-home 
  [ report context-determine-social-distancing (list my-home "rest") ]
  [ if risk-avoidance-satisfaction-level < #risk-avoidance-home-preference
    [ report context-determine-social-distancing (list my-home "rest") ] 
  ]
  ; Does not have to stay at home & risk avoidance is higher than forced stay home
  ifelse risk-avoidance-satisfaction-level < #risk-avoidance-private-leisure-preference ; Create preference for private leisure, when risk avoidance is more salient
  [ report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ]
  [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ) (list my-home "rest"))) ]
end

to-report csft-leisure
  if context-normative-should-I-stay-home
  [
    ifelse leisure-satisfaction-balanced < #need-critical-threshold
    [ if leisure-satisfaction-balanced < compliance-satisfaction-level
      [ report context-determine-social-distancing (list my-home "rest") ]
    ]
    [ report csft-leisure-f ]
  ]
  ; Does not have to stay home or leisure < compliance, then the agent prefers leisure at private or public
  ; Check private leisure preferred enabled
  ifelse ce-private-leisure-by-risk
  [ report csft-leisure-private-leisure-by-risk ]
  [ report csft-leisure-random-choice ]
  report csft-error-f
end

to-report csft-leisure-private-leisure-by-risk
  ifelse risk-avoidance-satisfaction-level < #risk-avoidance-private-leisure-preference ; Create preference for private leisure, when risk avoidance is more salient
  [ report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ]
  [ report csft-leisure-random-choice ]
end

to-report csft-leisure-random-choice
  report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" )))
end

to-report csft-food-safety
  if #enable-food-luxury-test
  [
    if not context-normative-should-I-stay-home or (food-safety-satisfaction-level < #need-critical-threshold and food-safety-satisfaction-level < compliance-satisfaction-level)
    [
      if food-safety-satisfaction-level < financial-stability-satisfaction-level and food-safety-satisfaction-level < financial-survival-satisfaction-level
      [ report context-determine-social-distancing (activity-descriptor one-of my-essential-shops "essential shopping") ]
    ]
  ]
  report csft-food-safety-f
end

to-report csft-luxury
  if #enable-food-luxury-test
  [
    if not context-normative-should-I-stay-home or (luxury-satisfaction-balanced < #need-critical-threshold and luxury-satisfaction-balanced < compliance-satisfaction-level)
    [
      if luxury-satisfaction-balanced < financial-stability-satisfaction-level and luxury-satisfaction-balanced < financial-survival-satisfaction-level
      [ report context-determine-social-distancing (activity-descriptor my-non-essential-shop "shopping") ]
    ]
  ]
  report csft-luxury-f
end

to-report csft-conformity
  
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if #log-agent and who = #agent-id [ print (word "Get network action: No action found") ] ]
  [
    ; Retrieve network action
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
    if #log-agent and who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
    
    ; Deliberate on network action
    ifelse network-motive = "rest"
    [ report (list my-home "rest" network-sd) ]
    [
      if csft-conformity-check-network-motive-available network-motive
      [
        if not context-normative-should-I-stay-home or (conformity-satisfaction-level < #need-critical-threshold and conformity-satisfaction-level < compliance-satisfaction-level)
        [ report (csft-conformity-perform-network-action network-g-type network-motive network-sd) ]
      ] ; ELSE: csft-conformity-f
    ]
  ]
  report csft-conformity-f
end

to-report csft-conformity-check-network-motive-available [ network-motive ]
  let available-network-motives (list "rest" "relaxing")
  if not (age = young-age)
  [
    set available-network-motives lput "essential shopping" available-network-motives
    set available-network-motives lput "shopping" available-network-motives
  ]
  report member? network-motive available-network-motives
end

to-report csft-conformity-perform-network-action [ network-g-type network-motive network-sd ]
  if network-g-type = public-leisure-gathering-type and network-motive = "relaxing"
  [ report lput network-sd (activity-descriptor my-public-leisure "relaxing") ]
  if network-g-type = private-leisure-gathering-type and network-motive = "relaxing"
  [ report lput network-sd (activity-descriptor my-private-leisure "relaxing") ]
  
  ; Financial check, or full assocc deliberation when young agent
  if age = young-age or not (conformity-satisfaction-level < financial-stability-satisfaction-level) or not (conformity-satisfaction-level < financial-survival-satisfaction-level)
  [ report csft-conformity-f ]
  
  if network-g-type = non-essential-shop-gathering-type and network-motive = "shopping"
  [ report lput network-sd (activity-descriptor my-non-essential-shop "shopping") ]
  if network-g-type = essential-shop-gathering-type and network-motive = "essential shopping"
  [ report lput network-sd (activity-descriptor one-of my-essential-shops "essential shopping") ] 
  
  report csft-conformity-f
end

;============== FULL DELIBERATION FUNCTIONS ==================
to-report csft-leisure-f
  report []
end

to-report csft-luxury-f
  report []
end

to-report csft-food-safety-f
  report []
end

to-report csft-conformity-f
  report []
end

to-report csft-error-f
  report []
end

;============== SALIENT NEEDS ==================
to-report csft-salient-needs
  let salient-needs []
  let salient-needs-level []
  if sleep-satisfaction-balanced < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-balanced salient-needs-level ]
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-balanced < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-balanced salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  ; Exit if not student or worker
  if age = young-age
  [ report list salient-needs salient-needs-level ]
  if food-safety-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-balanced < #need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-balanced salient-needs-level ]
  report list salient-needs salient-needs-level
end

to csft-balance-needs
  ifelse ce-enable-need-balancing
  [ set leisure-satisfaction-balanced leisure-satisfaction-level + ce-free-time-add-to-leisure 
    set luxury-satisfaction-balanced luxury-satisfaction-level + ce-add-to-luxury
    set sleep-satisfaction-balanced sleep-satisfaction-level + ce-day-add-to-sleep
  ]
  [ set leisure-satisfaction-balanced leisure-satisfaction-level
    set luxury-satisfaction-balanced luxury-satisfaction-level 
    set sleep-satisfaction-balanced sleep-satisfaction-level 
  ]
end