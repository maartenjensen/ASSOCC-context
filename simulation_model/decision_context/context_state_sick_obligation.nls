; Filename: context_state_sick_obligation.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Its a working day during morning or afternoon
; Age: young, student, or worker
; Sickness: The agent is not sick

; Global variables
; #need-critical-threshold

; Variables for the agent
; obligation-activity (defined in context_state_obligation.nls)

; Important needs:
; -----------------------------------
; Compliance: rest at home (norm following)
; Health: rest at home
; Belonging: rest at home
; Autonomy: obligation study/work
; Risk avoidance: rest at home
; Sleep: rest at home
; Leisure
; Conformity 
; [Exit if young]
; Food safety
; Luxury 
; [Exit if student]
; Financial stability
; Financial survival

;Code check:
; csso: NOT csn, cso, csft, cssn, cssft

;#need-critical-threshold for critical need


to-report context-state-sick-obligation ; csso

  ; The time is morning or afternoon
  if #log-agent and who = #agent-id [ print "Sick obligation decision making" ]

  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level cso-salient-needs
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient default
  ; -------------------------------------------
  if length salient-needs = 0
  [ report csso-default ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level first (last salient-needs-and-level)
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report csso-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report csso-salient-need-deliberation [most-salient-need most-salient-need-level ]
  
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Compliance is first checked, since the agents get a compliance boost at working hours OR at the beginning of the working day
  if most-salient-need = need-sleep or most-salient-need = need-health or most-salient-need = need-risk-avoidance or
     most-salient-need = need-belonging or most-salient-need = need-compliance
  [ report csso-sleep-health-risk-avoidance-belonging-compliance ]
  
  if most-salient-need = need-autonomy
  [ report csso-autonomy-financial most-salient-need-level ]
  
  ; TODO: 
  ; Implement Leisure, Luxury, Food Safety, Comformity (they are all more difficult to implement and that's why for now the algorithm will turn to using full ASSOCC deliberation
  if most-salient-need = need-leisure and most-salient-need-level < #need-critical-threshold
  [ report csso-leisure-luxury-food-safety ]
  
  if most-salient-need = need-conformity
  [ report csso-conformity most-salient-need-level ]
  
  if age = young-age
  [ report [] ]
  
  ; == STUDENT & WORKER: Shopping ==
  if (most-salient-need = need-luxury or most-salient-need = need-food-safety) and most-salient-need-level < #need-critical-threshold
  [ report csso-leisure-luxury-food-safety ]
  
  if age = student-age
  [ report [] ]

  ; == WORKER: Work for money ==
  if most-salient-need = need-financial-stability or most-salient-need = need-financial-survival
  [ report csso-autonomy-financial most-salient-need-level ]
  
  report []
end

;============== NEED FUNCTIONS =================
to-report csso-default
  report context-determine-social-distancing (list my-home "rest")
end

to-report csso-sleep-health-risk-avoidance-belonging-compliance
  report context-determine-social-distancing (list my-home "rest")
end

to-report csso-autonomy-financial [ most-salient-need-level ]
  if most-salient-need-level < #need-critical-threshold
  [ report context-determine-social-distancing obligation-activity-descriptor ]
  report []
end

to-report csso-leisure-luxury-food-safety ; TODO
  report []
end

to-report csso-conformity [ most-salient-need-level ] ; TODO
  report []
end

;============== SALIENT NEEDS ==================
to-report csso-salient-needs
  let salient-needs []
  let salient-needs-level []
  if compliance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  if health-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-health salient-needs 
    set salient-needs-level lput health-satisfaction-level salient-needs-level ]
  if sleep-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  ; Exit if not student or worker
  if age = young-age
  [ report list salient-needs salient-needs-level ]
  if food-safety-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-level salient-needs-level ]
  ; Exit if not worker
  if age = student-age
  [ report list salient-needs salient-needs-level ]
  if financial-survival-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-survival salient-needs 
    set salient-needs-level lput financial-survival-satisfaction-level salient-needs-level ]
  if financial-stability-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-stability salient-needs 
    set salient-needs-level lput financial-stability-satisfaction-level salient-needs-level ]
  ; Exit
  report list salient-needs salient-needs-level
end