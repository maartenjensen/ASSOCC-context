; Filename: context_state_sick_obligation.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Its a working day during morning or afternoon
; Age: young, student, or worker
; Sickness: The agent is not sick

; Global variables
; ce-need-critical-threshold

; Variables for the agent
; obligation-activity (defined in context_state_obligation.nls)

; Important needs:
; -----------------------------------
; Compliance: rest at home (norm following)
; Health: rest at home
; Belonging: rest at home
; Risk avoidance: rest at home
; Sleep: rest at home
; Autonomy: obligation study/work (conflict)
; Leisure (conflict)
; Conformity (conflict)
; [Exit if young]
; Food safety (conflict)
; Luxury (conflict)
; [Exit if student]
; Financial stability (conflict)
; Financial survival (conflict)

;Code check:
; csso: NOT csn, cso, csft, cssn, cssft, csowh, cssowh

;ce-need-critical-threshold for critical need


to-report csso-function ; csso

  ; The time is morning or afternoon
  if ce-log-agent and who = ce-log-agent-id [ print "Sick obligation decision making" ]

  ; -------------------------------------------
  ; Determine whether there is conflict
  ; -------------------------------------------
  if not csso-is-need-salient-and-conflicting
  [
    if ce-log-agent and who = ce-log-agent-id [ print "No conflict: performing default sick obligation" ]
    report csso-default
  ]
  
  if ce-context-depth <= 1 [ report csso-after-minimal-context-f ] ; ===============  BREAKOUT: After minimal
  
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level csso-salient-needs
  let salient-needs first salient-needs-and-level
  if ce-log-agent and who = ce-log-agent-id [ print (word "Salient needs:" salient-needs) ]
  
  if length salient-needs = 0
  [ error "in context-state-free_time, salient-needs should be not 0" ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level first (last salient-needs-and-level)
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report csso-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report csso-salient-need-deliberation [most-salient-need most-salient-need-level ]
  
  if ce-log-agent and who = ce-log-agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Compliance is first checked, since the agents get a compliance boost at working hours OR at the beginning of the working day
  if most-salient-need = need-sleep or most-salient-need = need-health or most-salient-need = need-risk-avoidance or
     most-salient-need = need-belonging or most-salient-need = need-compliance
  [ report csso-sleep-health-risk-avoidance-belonging-compliance ]
  
  if most-salient-need = need-autonomy
  [ report csso-autonomy-financial most-salient-need-level ]
  
  if most-salient-need = need-leisure
  [ report csso-leisure ]
  
  if most-salient-need = need-conformity
  [ if ce-context-depth < 4 [ report csso-exit-before-conformity-f ]  ; ===============  BREAKOUT: Conformity
    report csso-conformity ]
  ; report csso-conformity Why was this here?
  
  if age = young-age
  [ report [] ] 
  
  ; == STUDENT & WORKER: Shopping ==
  if most-salient-need = need-luxury
  [ report csso-luxury ]
  
  if most-salient-need = need-food-safety
  [ report csso-food-safety ]
  
  if age = student-age
  [ report [] ]

  ; == WORKER: Work for money ==
  if most-salient-need = need-financial-stability or most-salient-need = need-financial-survival
  [ report csso-autonomy-financial most-salient-need-level ]
  
  report csso-error-f
end

;============== NEED FUNCTIONS =================
to-report csso-default
  report context-determine-social-distancing (list my-home "rest")
end

to-report csso-sleep-health-risk-avoidance-belonging-compliance
  report context-determine-social-distancing (list my-home "rest")
end

to-report csso-autonomy-financial [ most-salient-need-level ]
  if most-salient-need-level < ce-need-critical-threshold
  [ report context-determine-social-distancing obligation-activity-descriptor ]
  report csso-autonomy-financial-f
end

to-report csso-leisure
  if leisure-satisfaction-level < ce-need-critical-threshold
  [
    report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") 
  ]
  report csso-leisure-f
end

to-report csso-luxury
  if luxury-satisfaction-level < ce-need-critical-threshold
  [
    if age = worker-age or (luxury-satisfaction-level < financial-stability-satisfaction-level and luxury-satisfaction-level < financial-survival-satisfaction-level)
    [ report context-determine-social-distancing (activity-descriptor my-non-essential-shop "shopping") ]
  ]
  report csso-luxury-f
end

to-report csso-food-safety
  if food-safety-satisfaction-level < ce-need-critical-threshold
  [
    if age = worker-age or (food-safety-satisfaction-level < financial-stability-satisfaction-level and food-safety-satisfaction-level < financial-survival-satisfaction-level)
    [ report context-determine-social-distancing (activity-descriptor one-of my-essential-shops "essential shopping") ]
  ]
  report csso-food-safety-f
end

to-report csso-conformity
  
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if ce-log-agent and who = ce-log-agent-id [ print (word "Get network action: No action found") ] ]
  [
    ; Retrieve network action
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
    if ce-log-agent and who = ce-log-agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
    
    ; Deliberate on network action
    ifelse conformity-satisfaction-level < ce-need-critical-threshold
    [
       report csso-conformity-choose-possible-network-action network-g-type network-motive network-sd
    ]
    [ if network-motive = "rest" [ report (list my-home "rest" network-sd) ] ]
  ]
  
  report csso-conformity-f
end

to-report csso-conformity-choose-possible-network-action [network-g-type network-motive network-sd]
  if network-motive = "rest"
  [ report (list my-home "rest" network-sd) ]
  if network-motive = motive-of obligation-activity-descriptor
  [ report (lput network-sd obligation-activity-descriptor) ]
  if network-motive = "private-leisure"
  [ report (lput network-sd activity-descriptor my-private-leisure "relaxing") ]
  if network-motive = "public-leisure"
  [ report (lput network-sd activity-descriptor my-public-leisure "relaxing") ]
  if age = worker-age or (age = student-age and conformity-satisfaction-level < financial-stability-satisfaction-level and conformity-satisfaction-level < financial-survival-satisfaction-level)
  [
    if network-motive = "essential-shop"
    [ report (lput network-sd activity-descriptor one-of my-essential-shops "essential shopping") ]
    if network-motive = "non-essential-shop"
    [ report (lput network-sd activity-descriptor my-non-essential-shop "shopping") ]
  ]
  report []
end

;============== FULL DELIBERATION FUNCTIONS ==================
to-report csso-after-minimal-context-f
  report []
end

to-report csso-exit-before-conformity-f
  report []
end

to-report csso-autonomy-financial-f
  report []
end

to-report csso-leisure-f
  report []
end

to-report csso-luxury-f
  report []
end

to-report csso-food-safety-f
  report []
end

to-report csso-conformity-f
  report []
end

to-report csso-error-f
  print "Error: sick obligation"
  report []
end

;============== SALIENT NEEDS ==================
to-report csso-is-need-salient-and-conflicting
  if leisure-satisfaction-level < ce-need-salient-threshold or conformity-satisfaction-level < ce-need-salient-threshold or autonomy-satisfaction-level < ce-need-salient-threshold
  [ report true ]
  if age = young-age
  [ report false ]
  if food-safety-satisfaction-level < ce-need-salient-threshold or luxury-satisfaction-level < ce-need-salient-threshold
  [ report true ]
  if age = student-age
  [ report false ]
  if financial-stability-satisfaction-level < ce-need-salient-threshold or financial-survival-satisfaction-level < ce-need-salient-threshold
  [ report true ]
  report false
end

to-report csso-salient-needs
  let salient-needs []
  let salient-needs-level []
  if compliance-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  if health-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-health salient-needs 
    set salient-needs-level lput health-satisfaction-level salient-needs-level ]
  if sleep-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  ; Exit if not student or worker
  if age = young-age
  [ report list salient-needs salient-needs-level ]
  if food-safety-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-level salient-needs-level ]
  ; Exit if not worker
  if age = student-age
  [ report list salient-needs salient-needs-level ]
  if financial-survival-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-financial-survival salient-needs 
    set salient-needs-level lput financial-survival-satisfaction-level salient-needs-level ]
  if financial-stability-satisfaction-level < ce-need-salient-threshold
  [ set salient-needs lput need-financial-stability salient-needs 
    set salient-needs-level lput financial-stability-satisfaction-level salient-needs-level ]
  ; Exit
  report list salient-needs salient-needs-level
end