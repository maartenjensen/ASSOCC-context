; Filename: context_state_obligation.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Morning or afternoon during working time
; Age: Young, Student or Retired
; Sickness: The agent is not sick
; Compliance is included in the salient need check

; Variables for the agent
; 
; 

to cso-init-agent-variables
  if age = young-age [
    set obligation-activity-descriptor (activity-descriptor my-school "mandatory")
  ]
  if age = student-age [
    set obligation-activity-descriptor (activity-descriptor my-university "learning")
  ]
  if age = worker-age [
    set obligation-activity-descriptor (activity-descriptor my-work work-motive)
  ]
end

; Important needs:
; -----------------------------------
; Compliance: norm following
; Belonging: norm following
; Autonomy
; Risk avoidance
; Sleep
; Leisure
; Conformity 
; [Exit if young]
; Food safety
; Luxury 
; [Exit if student]
; Financial stability
; Financial survival

;Code check:
; cso: NOT cst, csft, cstn, cson, csftn

to-report context-state-obligation ; cso
  
  ; The time is morning or afternoon
  if #log-agent and who = #agent-id [ print "Obligation decision making" ]
  ; salient needs, need-level < #need-salient-threshold
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level cso-salient-needs
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient default
  ; -------------------------------------------
  if length salient-needs = 0
  [ report cso-default ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  let most-salient-need-level last salient-needs-and-level
  if length salient-needs > 1
  [
    let most-salient-need-and-need-level (context-determine-most-salient-need-and-level salient-needs (last salient-needs-and-level))
    set most-salient-need first most-salient-need-and-need-level
    set most-salient-need-level last most-salient-need-and-need-level
  ]
  
  ; -------------------------------------------
  ; Deliberate on most salient need
  ; -------------------------------------------
  report cso-salient-need-deliberation most-salient-need most-salient-need-level
end

to-report cso-salient-need-deliberation [most-salient-need most-salient-need-level ]
  
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
  
  ; Sleep is first checked since its most probable that this is the lowest need
  ; The following needs support the default action: resting at home
  if most-salient-need = need-compliance or most-salient-need = need-belonging
  [ report cso-compliance-belonging ]
  
  ; The following needs support a non-default action and therefore the #need-critical-threshold needs to be checked. 
  ; Conformity is a little bit of an exception where if the network stays home the agent can just following conformity
  ;if most-salient-need = need-leisure and leisure-satisfaction-level < #need-critical-threshold [
  ;  report cst-leisure
  ;]
  
  ;if most-salient-need = need-conformity [
  ;  report cst-conformity
  ;]
  report []
end

;============== NEED FUNCTIONS =================
to-report cso-default
  ifelse context-normative-should-I-stay-home
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing obligation-activity-descriptor ]
end

to-report cso-compliance-belonging
  ifelse context-normative-should-I-stay-home
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing obligation-activity-descriptor ]
end

to-report cso-autonomy-financial [ most-salient-need-level ]
  ifelse not context-normative-should-I-stay-home
    [ report context-determine-social-distancing obligation-activity-descriptor ]
    [ if most-salient-need-level
      [ report context-determine-social-distancing obligation-activity-descriptor ]
    ]
  report []
end


; Compliance: norm following
; Belonging: norm following
; Autonomy
; Risk avoidance
; Sleep
; Leisure
; Conformity 
; [Exit if young]
; Food safety
; Luxury 
; [Exit if student]
; Financial stability
; Financial survival

;============== SALIENT NEEDS ==================
to-report cso-salient-needs
  let salient-needs []
  let salient-needs-level []
  if compliance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  if sleep-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput sleep-satisfaction-level salient-needs-level ]
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  ; Exit if not student or worker
  if age = young-age
  [ report list salient-needs salient-needs-level ]
  if food-safety-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-food-safety salient-needs 
    set salient-needs-level lput food-safety-satisfaction-level salient-needs-level ]
  if luxury-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-luxury salient-needs 
    set salient-needs-level lput luxury-satisfaction-level salient-needs-level ]
  ; Exit if not worker
  if age = student-age
  [ report list salient-needs salient-needs-level ]
  if financial-survival-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-survival salient-needs 
    set salient-needs-level lput financial-survival-satisfaction-level salient-needs-level ]
  if financial-stability-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-financial-stability salient-needs 
    set salient-needs-level lput financial-stability-satisfaction-level salient-needs-level ]
  ; Exit
  report list salient-needs salient-needs-level
end