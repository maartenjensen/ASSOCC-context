; Filename: context_select_activity.nls
__includes [ "decision_context/profiler_speed_test_functions.nls"
  "decision_context/context_state_sick_check_treatment.nls"
  "decision_context/context_state_night.nls" "decision_context/context_state_sick_night.nls"
  "decision_context/context_state_obligation.nls" "decision_context/context_state_sick_obligation.nls"
  "decision_context/context_state_obligation_work_home.nls" "decision_context/context_state_sick_obligation_work_home.nls"
  "decision_context/context_state_free_time.nls" "decision_context/context_state_sick_free_time.nls" ]

; =================================================
;  Extra variables for initialization
; =================================================
to context-init-variables
  set leisure-satisfaction-balanced 0
  set luxury-satisfaction-balanced 0
  set sleep-satisfaction-balanced 0
  
  if age = young-age
  [ set obligation-activity-descriptor (activity-descriptor my-school "mandatory") ]
  if age = student-age 
  [ set obligation-activity-descriptor (activity-descriptor my-university "learning") ]
  if age = worker-age 
  [ set obligation-activity-descriptor (activity-descriptor my-work work-motive) ]
  
  set need-critical-threshold 0.4
  set table-profiler-salient-needs table:make
end

; =================================================
;  The function that replaces the original 'select-activity' function
; =================================================
; This function is the same as in select_activity.nls, with the exception
; of calling conextual-deliberation-select-activity instead of
; my-preferred-available-activity-descriptor
to context-select-activity
  let c-a context-deliberation-select-activity
  ;let c-a my-preferred-available-activity-descriptor
  
  ;;select if migration takes over and people move around
  if (migration? and random-float 1 < probability-going-abroad) [
    set c-a (list away-gathering-point travelling-motive false)
  ]
  let loc location-of c-a
  select-activity-wtf? loc
  set current-activity loc
  set current-motivation motive-of c-a
  set chosen-available-activity-descriptor c-a
  set is-I-apply-social-distancing? social-distancing-of c-a
  if current-activity != away-gathering-point and current-motivation = travelling-motive [error "wrong place while travelling"]
  if log-violating-quarantine? [ process-quarantine-violation-event]
  
  if ce-log-agent and who = ce-log-agent-id [ print (word "- Final action: " ([gathering-type] of current-activity) ", " current-motivation ", " is-i-apply-social-distancing?)  ]
end

; =================================================
;  The decision tree 
; =================================================
to-report context-deliberation-select-activity
  reset-delib-count
  profiler-speed-test-functions
  let chosen-action []
  if ce-log-agent and who = ce-log-agent-id [ ifelse (slice-of-the-day = "morning") [ print "" print (word "== STEP " (ticks) ", DAY START AGENT: " ce-log-agent-id ", AGE: " age " ==") ][ print "" ] ]
  if ce-log-agent and who = ce-log-agent-id [ print (word ":" slice-of-the-day ", working-day: " is-working-day-for-me? ", sick: " (has-internally-visible-symptoms? or is-believing-to-be-infected?) ":") ]
  
  set delib-count-minimal-context 1
  
  ; Check whether the agent should rigidly follow quarantine and then let the agent stay home if the agent needs to
  if ce-should-rigidly-follow-quarantine and ce-context-depth >= 3
  [
    set chosen-action context-check-should-rigidly-follow-quarantine
    if not empty? chosen-action
    [
      report chosen-action
    ]
  ]
  
  ; Check whether not night (day time) and (retired or not a working day)
  ifelse (slice-of-the-day != "night")
  [
    ifelse slice-of-the-day = "evening" or (not is-working-day-for-me?) or age = retired-age
    [; FREE TIME
      ifelse not context-is-agent-sick
      [
        set chosen-action csft-function
        if not empty? chosen-action
        [ report csft-function-succeeded chosen-action ]
      ]
      [ ; SICK WITH FREE TIME
        set chosen-action cssct-function
        ifelse not empty? chosen-action
        [ report cssct-function-succeeded chosen-action ]
        [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
          set chosen-action cssft-function
          if not empty? chosen-action
          [ report cssft-function-succeeded chosen-action ]
        ]
      ]
    ]
    [ ; WORKING TIME
      ifelse not context-is-agent-sick
      [
        ifelse age = worker-age
        [ ifelse is-technically-feasible-to-work-from-home?
          [ set chosen-action csowh-function 
            if not empty? chosen-action [ report csowh-function-succeeded chosen-action ]
          ]
          [ set chosen-action cso-function 
            if not empty? chosen-action [ report cso-function-succeeded chosen-action ]
          ]
        ]
        [ set chosen-action cso-function 
          if not empty? chosen-action [ report cso-function-succeeded chosen-action ]
        ]
      ]
      [ ; SICK WITH WORKING TIME
        set chosen-action cssct-function
        ifelse not empty? chosen-action
        [ report cssct-function-succeeded chosen-action ]
        [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
          
          ifelse age = worker-age
          [ ifelse is-technically-feasible-to-work-from-home?
            [ set chosen-action cssowh-function
              if not empty? chosen-action [ report cssowh-function-succeeded chosen-action ]
            ]
            [ set chosen-action csso-function 
              if not empty? chosen-action [ report csso-function-succeeded chosen-action ]
            ]
          ]
          [ set chosen-action csso-function 
            if not empty? chosen-action [ report csso-function-succeeded chosen-action ]
          ]
        ]
      ]
    ]
  ]
  [ ; Time is night for all agents
    ifelse not context-is-agent-sick
    [
      set chosen-action csn-function
      if not empty? chosen-action
      [ report csn-function-succeeded chosen-action ]
    ]
    [; When the agent is sick
      set chosen-action cssct-function
      ifelse not empty? chosen-action
      [ report cssct-function-succeeded chosen-action ]
      [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
        set chosen-action cssn-function
        if not empty? chosen-action
        [ report cssn-function-succeeded chosen-action ]
      ]
    ]
  ]
  
  ; Do the full need based deliberation
  if ce-log-agent and who = ce-log-agent-id [ print (word "Full ASSOCC need based deliberation") ]
  set delib-count-full-need 1
  update-delib-count
  report my-preferred-available-activity-descriptor
end

; =================================================
;  Additional functions 
; =================================================
to-report context-check-should-rigidly-follow-quarantine
  ifelse not context-is-agent-sick
  [  ; If the agent is not sick just check the normative
    if context-normative-should-I-stay-home
    [ report context-state-quarantine-rigidly-normative-home-succeeded (context-determine-social-distancing (list my-home "rest")) ]
  ]
  [  ; if the agent is sick check whether the agent needs and can get treatment
    let chosen-action cssct-function
    ifelse not empty? chosen-action
    [ report cssct-function-succeeded chosen-action ]
    [ ; The agent should stay home when sick
      report context-state-sick-rigidly-normative-home-succeeded (context-determine-social-distancing (list my-home "rest"))
    ]
  ]
  report []
end

to-report context-state-sick-rigidly-normative-home-succeeded [p-param]
  report p-param 
end

to-report context-state-quarantine-rigidly-normative-home-succeeded [p-param]
  report p-param
end
; =================================================
;  Deliberation and context exploration functions
; =================================================
to-report context-heuristic-random-action [p-list-of-actions]
  if ce-log-agent and who = ce-log-agent-id [ print (word "Heuristic: Take random action of " p-list-of-actions ) ]
  report one-of p-list-of-actions
end

to-report context-normative-should-I-stay-home
  set delib-count-normative-consideration 1
  if ce-log-agent and who = ce-log-agent-id [ print (word "Normative check: should-I-stay-home? = " should-I-stay-home?) ]
  report should-I-stay-home?
end

to-report context-normative-should-I-stay-home-with-need [p-most-salient-need-level]
  set delib-count-normative-consideration 1
  ifelse should-I-stay-home?
  [ 
    ifelse p-most-salient-need-level < compliance-satisfaction-level ; This might have to be modified dependent on the need levels
    [ if ce-log-agent and who = ce-log-agent-id [ print (word "Normative check: I break quarantine because salient need " p-most-salient-need-level " is more salient than compliance " compliance-satisfaction-level ) ]
      report False ]
    [ if ce-log-agent and who = ce-log-agent-id [ print (word "Normative check: I should stay home because salient need " p-most-salient-need-level " is more salient than compliance " compliance-satisfaction-level ) ]
      report True ]
  ]
  [ if ce-log-agent and who = ce-log-agent-id [ print "Normative check: I don't have to stay home" ]
    report False ]
end

to-report context-determine-most-salient-need [p-salient-needs p-salient-needs-level]
  set delib-count-determine-most-salient-need 1
  let lowest-need first p-salient-needs
  let lowest-need-level first p-salient-needs-level
  let i 1
  foreach but-first p-salient-needs [ a-need ->
    if item i p-salient-needs-level < lowest-need-level
    [
      set lowest-need a-need
      set lowest-need-level item i p-salient-needs-level
    ]
    set i (i + 1)
  ]
  report lowest-need
end

to-report context-determine-most-salient-need-and-level [p-salient-needs p-salient-needs-level]
  set delib-count-determine-most-salient-need 1
  let lowest-need first p-salient-needs
  let lowest-need-level first p-salient-needs-level
  let i 1
  foreach but-first p-salient-needs [ a-need ->
    if item i p-salient-needs-level < lowest-need-level
    [
      set lowest-need a-need
      set lowest-need-level item i p-salient-needs-level
    ]
    set i (i + 1)
  ]
  report (list lowest-need lowest-need-level)
end

to-report context-is-agent-sick
  report has-internally-visible-symptoms? or is-believing-to-be-infected?
end

; Make this dependent on location?? Nope, not for now, its not needed for the research question.
to-report context-determine-social-distancing [gp-and-motive]
  if not with-infected?
  [ report lput False gp-and-motive ]
  if risk-avoidance-satisfaction-level < 0.75
  [ report lput True gp-and-motive ]
  report lput False gp-and-motive
end

to-report context-conformity-get-network-action
  set delib-count-conformity-network-action 1
  if not any? my-network [ report [] ]
  let relevant-memory ifelse-value is-working-day-for-me? [what-my-network-did-week-day] [what-my-network-did-weekend]
  if length relevant-memory >= 4 [
    report (first relevant-memory)
  ]
  report []
end

;==================================================
; General Need Functions
;==================================================

; The needs, order them according to alphabet
to-report need-risk-avoidance
  report "risk-avoidance"
end

to-report need-compliance
  report "compliance"
end

to-report need-financial-stability
  report "financial-stability"
end

to-report need-belonging
  report "belonging"
end

to-report need-leisure
  report "leisure"
end

to-report need-luxury
  report "luxury"
end

to-report need-autonomy
  report "autonomy"
end

to-report need-food-safety
  report "food-safety"
end

to-report need-financial-survival
  report "financial-survival"
end

to-report need-health
  report "health"
end

to-report need-sleep
  report "sleep"
end

to-report need-conformity
  report "conformity"
end

; =================================================
;  Functions for profiler
; =================================================
to-report csft-function-succeeded [p-param]
  report p-param
end

to-report csn-function-succeeded [p-param]
  report p-param
end

to-report cso-function-succeeded [p-param]
  report p-param
end

to-report csowh-function-succeeded [p-param]
  report p-param
end

to-report cssct-function-succeeded [p-param]
  report p-param
end

to-report cssn-function-succeeded [p-param]
  report p-param
end

to-report cssft-function-succeeded [p-param]
  report p-param
end

to-report csso-function-succeeded [p-param]
  report p-param
end

to-report cssowh-function-succeeded [p-param]
  report p-param
end

to update-delib-count
  set delib-count-total-minimal-context delib-count-minimal-context
  set delib-count-total-determine-most-salient-need delib-count-determine-most-salient-need
  set delib-count-total-compare-need-levels delib-count-compare-need-levels
  set delib-count-total-normative-consideration delib-count-normative-consideration
  set delib-count-total-conformity-network-action delib-count-conformity-network-action
  set delib-count-total-full-need delib-count-full-need
end

to reset-delib-count
  set delib-count-minimal-context 0
  set delib-count-determine-most-salient-need 0
  set delib-count-compare-need-levels 0
  set delib-count-normative-consideration 0
  set delib-count-conformity-network-action 0
  set delib-count-full-need 0  
end
