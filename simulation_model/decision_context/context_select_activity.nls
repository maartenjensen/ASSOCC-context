; Filename: context_select_activity.nls
__includes [ "decision_context/context_state_free_time.nls" "decision_context/context_state_night.nls"  "decision_context/context_state_sick.nls"
  "decision_context/context_state_obligation_young.nls" "decision_context/context_state_obligation_student.nls" "decision_context/context_state_obligation_worker.nls" 
  "decision_context/context_need_definition.nls" "decision_context/profiler_speed_test_functions.nls" ]

; This function is the same as in select_activity.nls, with the exception
; of calling conextual-deliberation-select-activity instead of
; my-preferred-available-activity-descriptor
to context-select-activity
  let c-a context-deliberation-select-activity
  ;let c-a my-preferred-available-activity-descriptor
  set deliberation-cost 0
  
  ;;select if migration takes over and people move around
  if (migration? and random-float 1 < probability-going-abroad) [
    set c-a (list away-gathering-point travelling-motive false)
  ]
  let loc location-of c-a
  select-activity-wtf? loc
  set current-activity loc
  set current-motivation motive-of c-a
  set chosen-available-activity-descriptor c-a
  set is-I-apply-social-distancing? social-distancing-of c-a
  if current-activity != away-gathering-point and current-motivation = travelling-motive [error "wrong place while travelling"]
  if log-violating-quarantine? [ process-quarantine-violation-event]
  
  ;if who = #agent-id [ print (word "- Final action: " ([gathering-type] of current-activity) ", " current-motivation ", " is-i-apply-social-distancing?)  ]
end

; This function contains the statemachine used for context-sensitive deliberation
to-report context-deliberation-select-activity
  reset-delib-count
  ;profiler-speed-test-functions
  let chosen-action []
  ;if who = #agent-id [ ifelse (slice-of-the-day = "morning") [ print "-- MORNING --" ][ print "" ] ]
  ;if who = #agent-id [ print (word "== Delib start agent: " #agent-id ", time: " slice-of-the-day ", working-day: " is-working-day-for-me? ", sick: " (has-internally-visible-symptoms? or is-believing-to-be-infected?) " ==") ]
  ; Check whether not night (day time) and (retired or not a working day)
  ifelse (slice-of-the-day != "night")
  [
    if age = worker-age
    [
      ifelse slice-of-the-day = "evening" or (not is-working-day-for-me?)
      [; FREE TIME
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-free-time
          if not empty? chosen-action
          [ report context-most-salient-need-free-time-succeeded chosen-action ]
        ]
        [ ; SICK WITH FREE TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-free-time
            if not empty? chosen-action
            [ report context-state-sick-free-time-succeeded chosen-action ]
          ]
        ]
      ]
      [ ; WORKING TIME
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-obligation-worker
          if not empty? chosen-action
          [ report context-most-salient-need-obligation-worker-succeeded chosen-action ]
        ]
        [ ; SICK WITH WORKING TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-obligation-worker
            if not empty? chosen-action
            [ report context-state-sick-obligation-succeeded chosen-action ]
          ]
        ]
      ]
    ]
    if age = young-age
    [
      ifelse slice-of-the-day = "evening" or (not is-working-day-for-me?)
      [ ; FREETIME
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-free-time-young
          if not empty? chosen-action
          [ report context-most-salient-need-free-time-succeeded chosen-action ]
        ]
        [ ; SICK WITH FREE TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-free-time-young
            if not empty? chosen-action
            [ report context-state-sick-free-time-succeeded chosen-action ]
          ]
        ]
      ] 
      [ ; The time is working time (afternoon or morning)
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-obligation-young
          if not empty? chosen-action
          [ report context-most-salient-need-obligation-young-succeeded chosen-action ]
        ]
        [ ; SICK WITH WORKING TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-obligation-young
            if not empty? chosen-action
            [ report context-state-sick-obligation-succeeded chosen-action ]
          ]
        ]
      ]
    ]
    if age = student-age
    [
      ifelse slice-of-the-day = "evening" or (not is-working-day-for-me?)
      [ ; FREETIME
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-free-time
          if not empty? chosen-action
          [ report context-most-salient-need-free-time-succeeded chosen-action ]
        ]
        [ ; SICK WITH FREE TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-free-time
            if not empty? chosen-action
            [ report context-state-sick-free-time-succeeded chosen-action ]
          ]
        ]
      ]
      [ ; STUDYING
        ifelse not context-is-agent-sick
        [
          set chosen-action context-state-obligation-student
          if not empty? chosen-action
          [ report context-most-salient-need-obligation-student-succeeded chosen-action ]
        ]
        [ ; SICK WITH WORKING TIME
          set chosen-action context-state-sick-treatment
          ifelse not empty? chosen-action
          [ report context-state-sick-treatment-succeeded chosen-action ]
          [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
            set chosen-action context-state-sick-obligation-student
            if not empty? chosen-action
            [ report context-state-sick-obligation-succeeded chosen-action ]
          ]
        ]
      ]
    ]
    if age = retired-age
    [ ; Free time
      ifelse not context-is-agent-sick
      [
        set chosen-action context-state-free-time
        if not empty? chosen-action
        [ report context-most-salient-need-free-time-succeeded chosen-action ]
      ]
      [ ; Sick with free time
        set chosen-action context-state-sick-treatment
        ifelse not empty? chosen-action
        [ report context-state-sick-treatment-succeeded chosen-action ]
        [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
          set chosen-action context-state-sick-free-time
          if not empty? chosen-action
          [ report context-state-sick-free-time-succeeded chosen-action ]
        ]
      ]
    ]
  ]
  [ ; Time is night for all agents
    ifelse not context-is-agent-sick
    [
      set chosen-action context-state-night
      if not empty? chosen-action
      [ report context-most-salient-need-night-succeeded chosen-action ]
    ]
    [; When the agent is sick
      set chosen-action context-state-sick-treatment
      ifelse not empty? chosen-action
      [ report context-state-sick-treatment-succeeded chosen-action ]
      [ ; The agent does not need heavy treatment but still needs to determine whether to stay home when sick
        set chosen-action context-state-sick-night
        if not empty? chosen-action
        [ report context-state-sick-night-succeeded chosen-action ]
      ]
    ]
  ]
  
  ; Do the full need based deliberation
  ;if who = #agent-id [ print (word "Full ASSOCC need based deliberation") ]
  set delib-count-full-need 1
  update-delib-count
  report my-preferred-available-activity-descriptor
end

; Context functions

to-report context-heuristic-random-action [p-list-of-actions]
  ;if who = #agent-id [ print (word "Heuristic: Take random action of " p-list-of-actions ) ]
  report one-of p-list-of-actions
end

to-report context-normative-should-I-stay-home-with-need [p-most-salient-need-level]
  ifelse should-I-stay-home?
  [ 
    ifelse p-most-salient-need-level < compliance-satisfaction-level ; This might have to be modified dependent on the need levels
    [ ;if who = #agent-id [ print (word "Normative check: I break quarantine because salient need " p-most-salient-need-level " is more salient than compliance " compliance-satisfaction-level ) ]
      report False ]
    [ ;if who = #agent-id [ print (word "Normative check: I should stay home because salient need " p-most-salient-need-level " is more salient than compliance " compliance-satisfaction-level ) ]
      report True ]
  ]
  [ ;if who = #agent-id [ print "Normative check: I don't have to stay home" ]
    report False ]
end

to-report context-is-agent-sick
  report has-internally-visible-symptoms? or is-believing-to-be-infected?
end

to-report context-most-salient-need-free-time-succeeded [p-param]
  report p-param
end

to-report context-most-salient-need-night-succeeded [p-param]
  report p-param
end

to-report context-most-salient-need-obligation-young-succeeded [p-param]
  report p-param
end

to-report context-most-salient-need-obligation-student-succeeded [p-param]
  report p-param
end

to-report context-most-salient-need-obligation-worker-succeeded [p-param]
  report p-param
end

to-report context-state-sick-treatment-succeeded [p-param]
  report p-param
end

to-report context-state-sick-night-succeeded [p-param]
  report p-param
end

to-report context-state-sick-free-time-succeeded [p-param]
  report p-param
end

to-report context-state-sick-obligation-succeeded [p-param]
  report p-param
end

to-report get-sleep-satisfaction-day
  report sleep-satisfaction-level + #sleep-day-add
end

to-report get-leisure-satisfaction-free-time
  report leisure-satisfaction-level + #leisure-free-time-add
end

; Make this dependent on location??
to-report context-determine-social-distancing [gp-and-motive]
  if not with-infected?
  [ report lput False gp-and-motive ]
  if risk-avoidance-satisfaction-level < 0.75
  [ report lput True gp-and-motive ]
  report lput False gp-and-motive
end

to update-delib-count
  set delib-count-total-typical delib-count-typical
  set delib-count-total-critical-need delib-count-critical-need
  set delib-count-total-one-need delib-count-one-need
  set delib-count-total-one-need-conformity delib-count-one-need-conformity
  set delib-count-total-one-need-multi-actions delib-count-one-need-multi-actions
  set delib-count-total-full-need delib-count-full-need
end

to reset-delib-count
  set delib-count-typical 0
  set delib-count-critical-need 0
  set delib-count-one-need 0
  set delib-count-one-need-conformity 0
  set delib-count-one-need-multi-actions 0
  set delib-count-full-need 0  
end

; The needs, order them according to alphabet
to-report need-risk-avoidance
  report "risk-avoidance"
end

to-report need-compliance
  report "compliance"
end

to-report need-financial-stability
  report "financial-stability"
end

to-report need-belonging
  report "belonging"
end

to-report need-leisure
  report "leisure"
end

to-report need-luxury
  report "luxury"
end

to-report need-autonomy
  report "autonomy"
end

to-report need-food-safety
  report "food-safety"
end

to-report need-financial-survival
  report "financial-survival"
end

to-report need-health
  report "health"
end

to-report need-sleep
  report "sleep"
end

to-report need-conformity
  report "conformity"
end