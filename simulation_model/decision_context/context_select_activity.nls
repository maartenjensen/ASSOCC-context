__includes [ "decision_context/context_worker_working.nls" ]

;__includes [ "decision_context/context_actions.nls" "decision_context/context_time.nls" "decision_context/context_typical_actions.nls" "decision_context/context_need_actions.nls" "decision_context/context_needs.nls" "decision_context/context_variables.nls" ]
; context_select_activity.nls

; This function is the same as in select_activity.nls, with the exception
; of calling conextual-deliberation-select-activity instead of
; my-preferred-available-activity-descriptor
to context-select-activity
  let c-a contextual-deliberation-select-activity
  ;let c-a my-preferred-available-activity-descriptor
  set deliberation-cost 0
  
  ;;select if migration takes over and people move around
  if (migration? and random-float 1 < probability-going-abroad) [
    set c-a (list away-gathering-point travelling-motive false)
  ]
  let loc location-of c-a
  select-activity-wtf? loc
  set current-activity loc
  set current-motivation motive-of c-a
  set chosen-available-activity-descriptor c-a
  set is-I-apply-social-distancing? social-distancing-of c-a
  if current-activity != away-gathering-point and current-motivation = travelling-motive [error "wrong place while travelling"]
  if log-violating-quarantine? [ process-quarantine-violation-event]
  
  if who = #agent-id [ print (word "- Final action: " ([gathering-type] of current-activity) ", " current-motivation ", " is-i-apply-social-distancing?)  ]
end

to-report contextual-deliberation-select-activity
  reset-delib-count
  if who = #agent-id [ print (word "== Delib start agent: " #agent-id " ==") ]
  ; Check whether not night (day time) and (retired or not a working day)
  if (age = retired-age and slice-of-the-day != "night") or (slice-of-the-day = "evening" or (not is-working-day-for-me?))
  [
    ; Check whether sick, we are only considering not sick
    if not (has-internally-visible-symptoms? or is-believing-to-be-infected?)
    [
      ; The time is morning, afternoon or evening
      if who = #agent-id [ print "Custom leisure time deliberation" ]
      ; most important need??
      let most-salient-need get-most-salient-need
      if who = #agent-id [ print (word "Most salient need:" most-salient-need) ]
      if most-salient-need = need-belonging [
        
      ]
      let final-action lput func-determine-social-distancing (list my-home "rest")
      report final-action
    ]
  ]
  
  ; Do the full need based deliberation
  if who = #agent-id [ print (word "Full ASSOCC need based deliberation") ]
  set delib-count-full-need 1
  update-delib-count
  report my-preferred-available-activity-descriptor
end

; determining between food, home and leisure
to-report get-most-salient-need
  let lowest-need-level risk-avoidance-satisfaction-level
  let lowest-need need-risk-avoidance
  if belonging-satisfaction-level < lowest-need-level [
    set lowest-need-level belonging-satisfaction-level
    set lowest-need need-belonging 
  ]
  if leisure-satisfaction-level < lowest-need-level [
    set lowest-need-level leisure-satisfaction-level
    set lowest-need need-leisure 
  ]
  if luxury-satisfaction-level < lowest-need-level [
    set lowest-need-level luxury-satisfaction-level
    set lowest-need need-luxury 
  ]
  if food-safety-satisfaction-level < lowest-need-level [
    set lowest-need-level food-safety-satisfaction-level
    set lowest-need need-food-safety 
  ]
  if conformity-satisfaction-level < lowest-need-level [
    set lowest-need-level conformity-satisfaction-level
    set lowest-need need-conformity 
  ]
  report lowest-need
end



to-report func-determine-social-distancing
  if not with-infected?
  [ report False ]
  report True
end

to update-delib-count
  set delib-count-total-typical delib-count-typical
  set delib-count-total-critical-need delib-count-critical-need
  set delib-count-total-one-need delib-count-one-need
  set delib-count-total-one-need-conformity delib-count-one-need-conformity
  set delib-count-total-one-need-multi-actions delib-count-one-need-multi-actions
  set delib-count-total-full-need delib-count-full-need
end

to reset-delib-count
  set delib-count-typical 0
  set delib-count-critical-need 0
  set delib-count-one-need 0
  set delib-count-one-need-conformity 0
  set delib-count-one-need-multi-actions 0
  set delib-count-full-need 0  
end

; The needs, order them according to alphabet
to-report need-risk-avoidance
  report "risk-avoidance"
end

to-report need-compliance
  report "compliance"
end

to-report need-financial-stability
  report "financial-stability"
end

to-report need-belonging
  report "belonging"
end

to-report need-leisure
  report "leisure"
end

to-report need-luxury
  report "luxury"
end

to-report need-autonomy
  report "autonomy"
end

to-report need-food-safety
  report "food-safety"
end

to-report need-financial-survival
  report "financial-survival"
end

to-report need-health
  report "health"
end

to-report need-sleep
  report "sleep"
end

to-report need-conformity
  report "conformity"
end