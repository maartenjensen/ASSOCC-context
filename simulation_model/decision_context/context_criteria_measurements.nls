; Filename: context_criteria_measurements.nls

; Work related
; ----------------------
; if is-technically-feasible-to-work-from-home? and I-know-of-working-from-home?
; is-working-at-work? OR is-working?
; should-I-stay-home?

; slice-of-the-day is actually one step ahead, at the end of the go function the slice-of-the-day is incremented by one
; day-of-the-week is also one step ahead if the slice-of-the-day is morning (since the actual data is that of the night).

; Criteria for normal life
; ------------------------
; Unaffected by being sick
to-report criteria_night_home
  if actual-slice-of-the-day = "night"
  [ 
    let agents_all_relevant count people with [current-motivation != treatment-motive]  ; All the people that are not in treatment
    let agents_at_home count people with [is-at-home?]                                  ; All the people that are at home
    report (agents_at_home / agents_all_relevant) * 100 
  ]
  report -1
end

to-report criteria_leisure_not_sick_not_night
  if actual-slice-of-the-day != "night"
  [
    let agents_can_leisure count people with [not should-I-stay-home? and (actual-slice-of-the-day = "evening" or (not actually-is-working-day-for-me?) or age = retired-age)]
    let agents_do_leisure count people with [is-relaxing?]
    
    if agents_can_leisure > 0
    [ report (agents_do_leisure / agents_can_leisure) * 100 ]
  ]
  report -1
end

to-report criteria_ess_shopping_not_sick_not_night
  if actual-slice-of-the-day != "night"
  [
    let agents_can_ess_shop count people with [not should-I-stay-home? and (actual-slice-of-the-day = "evening" or (not actually-is-working-day-for-me?) or age = retired-age)]
    let agents_do_ess_shop count people with [is-performing-essential-shopping?]
    
    if agents_can_ess_shop > 0
    [ report (agents_do_ess_shop / agents_can_ess_shop) * 100 ]
  ]
  report -1
end

to-report criteria_non_ess_shopping_not_sick_not_night
  if actual-slice-of-the-day != "night"
  [
    let agents_can_non_ess_shop count people with [not should-I-stay-home? and (actual-slice-of-the-day = "evening" or (not actually-is-working-day-for-me?) or age = retired-age)]
    let agents_do_non_ess_shop count people with [is-performing-non-essential-shopping?]
    
    if agents_can_non_ess_shop > 0
    [ report (agents_do_non_ess_shop / agents_can_non_ess_shop) * 100 ]
  ]
  report -1
end

; Criteria for working life
; -----------------------
; The only reason when children can skip school is when they need to stay at home, if they are getting treatment they also should stay at home
to-report criteria_not_skip_school
   
  if (actual-slice-of-the-day = "morning" or actual-slice-of-the-day = "afternoon") and not (actual-day-of-the-week = "saturday" or actual-day-of-the-week = "sunday")
  [
    let children_should_school count children with [not should-I-stay-home?]
    let children_do_school count children with [not should-I-stay-home? and is-at-school?]

    if children_should_school > 0
    [ report (children_do_school / children_should_school) * 100 ]
  ]
  report -1
end

; The only reason when children can skip school is when they need to stay at home, if they are getting treatment they also should stay at home
to-report criteria_not_skip_university
   
  if (actual-slice-of-the-day = "morning" or actual-slice-of-the-day = "afternoon") and not (actual-day-of-the-week = "saturday" or actual-day-of-the-week = "sunday")
  [
    let students_should_school count students with [not should-I-stay-home?]
    let students_do_school count students with [not should-I-stay-home? and is-at-university?]

    if students_should_school > 0
    [ report (students_do_school / students_should_school) * 100 ]
  ]
  report -1
end

to-report criteria_not_skip_work
 
  if (actual-slice-of-the-day = "morning" or actual-slice-of-the-day = "afternoon")
  [
    let workers_should_work count workers with [(not should-I-stay-home? or (is-technically-feasible-to-work-from-home? and not criteria_function_agent_knows_sick)) and actually-is-working-day-for-me?]
    let workers_do_work count workers with [(not should-I-stay-home? or (is-technically-feasible-to-work-from-home? and not criteria_function_agent_knows_sick)) and actually-is-working-day-for-me? and is-working?]

    if workers_should_work > 0
    [ report (workers_do_work / workers_should_work) * 100 ]
  ]
  report -1
end

to-report criteria_when_possible_work_at_workplace_and_not_from_home
 
  if (actual-slice-of-the-day = "morning" or actual-slice-of-the-day = "afternoon")
  [
    let workers_should_work_at_workplace count workers with [is-technically-feasible-to-work-from-home? and not should-I-stay-home? and actually-is-working-day-for-me?]
    let workers_do_work_at_workplace count workers with [is-technically-feasible-to-work-from-home? and not should-I-stay-home? and actually-is-working-day-for-me? and is-working-at-work?]

    if workers_should_work_at_workplace > 0
    [ report (workers_do_work_at_workplace / workers_should_work_at_workplace) * 100 ]
  ]
  report -1
end


; Add criteria for working

; Criteria for pandemic
; ---------------------
to-report criteria_people_staying_in_quarantine
  if count officially-quarantiners > 0
  [
    let people_in_quarantine count people with [is-officially-asked-to-quarantine-for-plots? and is-in-quarantine?]
    report (people_in_quarantine / count officially-quarantiners) * 100
  ]
  report -1
end

to-report criteria_children_staying_in_quarantine
  if count officially-quarantiners-children > 0
  [
    let children_in_quarantine count children with [is-officially-asked-to-quarantine-for-plots? and is-in-quarantine?]
    report (children_in_quarantine / count officially-quarantiners-children) * 100
  ]
  report -1
end

to-report criteria_students_staying_in_quarantine
  if count officially-quarantiners-students > 0
  [
    let students_in_quarantine count students with [is-officially-asked-to-quarantine-for-plots? and is-in-quarantine?]
    report (students_in_quarantine / count officially-quarantiners-students) * 100
  ]
  report -1
end

to-report criteria_workers_staying_in_quarantine
  if count officially-quarantiners-workers > 0
  [
    let workers_in_quarantine count workers with [is-officially-asked-to-quarantine-for-plots? and is-in-quarantine?]
    report (workers_in_quarantine / count officially-quarantiners-workers) * 100
  ]
  report -1
end

to-report criteria_retireds_staying_in_quarantine
  if count officially-quarantiners-retireds > 0
  [
    let retireds_in_quarantine count retireds with [is-officially-asked-to-quarantine-for-plots? and is-in-quarantine?]
    report (retireds_in_quarantine / count officially-quarantiners-retireds) * 100
  ]
  report -1
end

; Sick rest at home or treatment at hospital
to-report criteria_rest_when_know_sick
  
  let people_know_sick count people with [criteria_function_agent_knows_sick]
  
  if people_know_sick > 0 [
    let people_know_sick_that_rest count people with [criteria_function_agent_knows_sick and (current-motivation = "rest" or current-motivation = treatment-motive)]
    
    report (people_know_sick_that_rest / people_know_sick) * 100
  ]
  report -1
end

; ===============================
; Helping functions
; ===============================

to-report criteria_function_agent_knows_sick
  report has-internally-visible-symptoms? or is-believing-to-be-infected?
end

to-report actual-slice-of-the-day
  report slice-of-the-day-of-current-plots-and-data
end

to-report actual-day-of-the-week
  if slice-of-the-day = "morning"
  [
    if day-of-the-week = "monday"
    [ report "sunday"]
    if day-of-the-week = "tuesday"
    [ report "monday"]
    if day-of-the-week = "wednesday"
    [ report "tuesday"]
    if day-of-the-week = "thursday"
    [ report "wednesday"]
    if day-of-the-week = "friday"
    [ report "thursday"]
    if day-of-the-week = "saturday"
    [ report "friday"]
    if day-of-the-week = "sunday"
    [ report "saturday"]
  ]
  report day-of-the-week
end

to-report actually-is-working-day-for-me?
  if is-gathering-point? self [ ifelse is-shop? [report is-shops-open-today?] [report not (actual-day-of-the-week = "saturday" or actual-day-of-the-week = "sunday")]]
  
  if is-person? self 
  [
    if is-worker? [report [actually-is-working-day-for-me?] of my-work]
    report not (actual-day-of-the-week = "saturday" or actual-day-of-the-week = "sunday")
  ]

  error (sentence "wrong user of this function" self [age] of self)
end