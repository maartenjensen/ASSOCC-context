; Filename: context_state_obligation_young.nls
; What we know from the context within these functions
; Location: Does not matter in implementation, as the agent just travels to the location where the agent can perform the action.
; Time: Morning or afternoon during working time
; Age: Young
; Sickness: The agent is not sick

; Important needs (for young):
; -----------------------------------
; Autonomy       : Prefers school, and if should stay home goes to school anyway if autonomy critical, otherwise full ASSOCC
; Belonging      : If need to stay home -> stay home, otherwise go to school (since belonging is satisfied at both home and school (and other places)
; Conformity     : If the network is going to school (or university or work) the young agent will go to school, otherwise full ASSOCC will determine it.
; COMPLIANCE     : If need to stay home -> stay home, otherwise go to school
; Leisure        : Full ASSOCC (to difficult to determine with simple rules)
; Risk avoidance : The agent should always stay home with SD, since its lower than compliance as well
; Sleep          : Prefers to stay home, if not should stay home then stays home, otherwise ASSOCC

; Reconsider these states as they don't make so much sense (at least the risk avoidance part). Maybe autonomy and risk avoidance should be switched
to-report context-state-obligation-young ; This should be ONLY young since there is a different action
  
  ; The time is (morning or afternoon) and on a working day
  if #log-agent and who = #agent-id [ print "Custom deliberation: Obligation young state" ]
  ; -------------------------------------------
  ; Determine whether there is a need salient
  ; -------------------------------------------
  let salient-needs-and-level context-get-salient-needs-obligation-young
  let salient-needs first salient-needs-and-level
  if #log-agent and who = #agent-id [ print (word "Salient needs:" salient-needs) ]
  
  ; -------------------------------------------
  ; If no need salient do default
  ; -------------------------------------------
  if length salient-needs = 0
  [ ifelse context-normative-should-I-stay-home
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing (activity-descriptor my-school "mandatory") ]
  ]
  
  ; -------------------------------------------
  ; If salient needs is larger than 1, determine most salient
  ; -------------------------------------------
  let most-salient-need first salient-needs
  if length salient-needs > 1
  [
    set most-salient-need (context-determine-most-salient-need salient-needs (last salient-needs-and-level))
  ]
  if #log-agent and who = #agent-id [ print (word "Most salient need:" most-salient-need) ]

  ; -------------------------------------------
  ; Check for each need separately (if a need is confirmed and this does not return an action, then report [] should be called)
  ; -------------------------------------------
  ; The agents get a boost of compliance in the morning and afternoon, for computational efficiency compliance is checked first.
  if most-salient-need = need-compliance or most-salient-need = need-belonging [ 
    ifelse context-normative-should-I-stay-home
    [ report context-determine-social-distancing (list my-home "rest") ]
    [ report context-determine-social-distancing (activity-descriptor my-school "mandatory") ]
  ]
  if most-salient-need = need-autonomy [
    ifelse context-normative-should-I-stay-home
    [ 
      ifelse autonomy-satisfaction-level < #need-critical-threshold
      [ report context-determine-social-distancing (activity-descriptor my-school "mandatory") ]
      [ report [] ]
    ]
    [ report context-determine-social-distancing (activity-descriptor my-school "mandatory") ]
  ]
  if most-salient-need = need-risk-avoidance 
  [
    ifelse context-normative-should-I-stay-home
    [ report (list my-home "rest" True) ]
    [ 
      ifelse risk-avoidance-satisfaction-level < #need-critical-threshold
      [ report (list my-home "rest" True) ]
      [ report [] ]
    ] 
  ]
  if most-salient-need = need-sleep 
  [
    ifelse context-normative-should-I-stay-home
    [ report (list my-home "rest" True) ]
    [ 
      ifelse sleep-satisfaction-level < #need-critical-threshold
      [ report (list my-home "rest" True) ]
      [ report [] ]
    ] 
  ]
  if most-salient-need = need-leisure [
    report context-state-obligation-young-leisure
  ]
  if most-salient-need = need-conformity [
    report context-state-obligation-young-conformity
  ]
  report []
end

to-report context-state-obligation-young-leisure
  if leisure-satisfaction-level < #need-critical-threshold
  [
    ifelse risk-avoidance-satisfaction-level < #risk-avoidance-private-leisure-preference ; Create preference for private leisure, when risk avoidance is more salient
    [ report context-determine-social-distancing (activity-descriptor my-private-leisure "relaxing") ]
    [ report context-determine-social-distancing (context-heuristic-random-action (list (activity-descriptor my-private-leisure "relaxing") (activity-descriptor my-public-leisure "relaxing" ))) ]
  ]
  report []
end

to-report context-state-obligation-young-conformity
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if #log-agent and who = #agent-id [ print (word "Get network action: No action found") ] ]
  [
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance? ; Since conformity is lower than risk-avoidance the agent will follow what the network does rather than social distancing based on the risk-avoidance value
    if #log-agent and who = #agent-id [ print (word "Get network action: " network-g-type ", " network-motive ", " network-sd) ]
    if conformity-satisfaction-level < #need-critical-threshold
    [
      
    ]
  ]
  
  
  
  let network-action context-conformity-get-network-action
  ifelse empty? network-action
  [ if #log-agent and who = #agent-id [ print (word "Get network action: No action found") ] 
    report []
  ]
  [
    let network-g-type (location-of network-action)
    let network-motive motive-of network-action
    let network-sd did-my-network-socially-distance?
    
    if network-motive = "mandatory" or network-motive = work-motive
    [
      report lput network-sd (activity-descriptor my-school "mandatory")
    ]
  ]
  report []
end

; This function compares without the luxury and food safety need, since young don't do shopping
to-report context-get-salient-needs-obligation-young
  let salient-needs []
  let salient-needs-level []
  if risk-avoidance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-risk-avoidance salient-needs 
    set salient-needs-level lput risk-avoidance-satisfaction-level salient-needs-level ]
  if compliance-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-compliance salient-needs 
    set salient-needs-level lput compliance-satisfaction-level salient-needs-level ]
  if belonging-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-belonging salient-needs 
    set salient-needs-level lput belonging-satisfaction-level salient-needs-level ]
  if leisure-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-leisure salient-needs 
    set salient-needs-level lput leisure-satisfaction-level salient-needs-level ]
  if autonomy-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-autonomy salient-needs 
    set salient-needs-level lput autonomy-satisfaction-level salient-needs-level ]
  if get-sleep-satisfaction-day < #need-salient-threshold
  [ set salient-needs lput need-sleep salient-needs 
    set salient-needs-level lput get-sleep-satisfaction-day salient-needs-level ]
  if conformity-satisfaction-level < #need-salient-threshold
  [ set salient-needs lput need-conformity salient-needs 
    set salient-needs-level lput conformity-satisfaction-level salient-needs-level ]
  report list salient-needs salient-needs-level
end
